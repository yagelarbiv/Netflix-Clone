"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.withRemult = exports.doTransaction = exports.EventSource = exports.queryConfig = exports.Allow = exports.setControllerSettings = exports.ClassHelper = exports.Remult = exports.isBackend = exports.RemultAsyncLocalStorage = void 0;
var tslib_1 = require("tslib");
var rest_data_provider_js_1 = require("./data-providers/rest-data-provider.js");
var LiveQueryClient_js_1 = require("./live-query/LiveQueryClient.js");
var SseSubscriptionClient_js_1 = require("./live-query/SseSubscriptionClient.js");
var remult_proxy_js_1 = require("./remult-proxy.js");
var RepositoryImplementation_js_1 = require("./remult3/RepositoryImplementation.js");
var server_action_info_js_1 = require("./server-action-info.js");
var buildRestDataProvider_js_1 = require("./buildRestDataProvider.js");
var relationInfoMember_js_1 = require("./remult3/relationInfoMember.js");
var remult_static_js_1 = require("./remult-static.js");
var initDataProvider_js_1 = require("../server/initDataProvider.js");
var RemultAsyncLocalStorage = /** @class */ (function () {
    function RemultAsyncLocalStorage(remultObjectStorage) {
        this.remultObjectStorage = remultObjectStorage;
    }
    RemultAsyncLocalStorage.enable = function () {
        remult_static_js_1.remultStatic.remultFactory = function () {
            var r = remult_static_js_1.remultStatic.asyncContext.getStore();
            if (r)
                return r.remult;
            else
                throw new Error('remult object was requested outside of a valid context, try running it within initApi or a remult request cycle');
        };
    };
    RemultAsyncLocalStorage.disable = function () {
        (0, remult_static_js_1.resetFactory)();
    };
    RemultAsyncLocalStorage.prototype.run = function (remult, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                if (this.remultObjectStorage) {
                    return [2 /*return*/, this.remultObjectStorage.run({ remult: remult }, function () { return callback(remult); })];
                }
                else
                    return [2 /*return*/, callback(remult)];
                return [2 /*return*/];
            });
        });
    };
    RemultAsyncLocalStorage.prototype.isInInitRequest = function () {
        var _a, _b;
        return (_b = (_a = this.remultObjectStorage) === null || _a === void 0 ? void 0 : _a.getStore()) === null || _b === void 0 ? void 0 : _b.inInitRequest;
    };
    RemultAsyncLocalStorage.prototype.setInInitRequest = function (val) {
        var _a;
        var store = (_a = this.remultObjectStorage) === null || _a === void 0 ? void 0 : _a.getStore();
        if (!store)
            return;
        store.inInitRequest = val;
    };
    RemultAsyncLocalStorage.prototype.getStore = function () {
        if (!this.remultObjectStorage) {
            throw new Error("can't use static remult in this environment, `async_hooks` were not initialized");
        }
        return this.remultObjectStorage.getStore();
    };
    return RemultAsyncLocalStorage;
}());
exports.RemultAsyncLocalStorage = RemultAsyncLocalStorage;
if (!remult_static_js_1.remultStatic.asyncContext)
    remult_static_js_1.remultStatic.asyncContext = new RemultAsyncLocalStorage(undefined);
function isBackend() {
    return remult_static_js_1.remultStatic.actionInfo.runningOnServer || !remult_proxy_js_1.remult.dataProvider.isProxy;
}
exports.isBackend = isBackend;
var Remult = /** @class */ (function () {
    function Remult(provider) {
        var _this = this;
        /**Return's a `Repository` of the specific entity type
         * @example
         * const taskRepo = remult.repo(Task);
         * @see [Repository](https://remult.dev/docs/ref_repository.html)
         * @param entity - the entity to use
         * @param dataProvider - an optional alternative data provider to use. Useful for writing to offline storage or an alternative data provider
         */
        this.repo = function (entity, dataProvider) {
            if (dataProvider === undefined)
                dataProvider = _this.dataProvider;
            var dpCache = _this.repCache.get(dataProvider);
            if (!dpCache)
                _this.repCache.set(dataProvider, (dpCache = new Map()));
            var r = dpCache.get(entity);
            if (!r) {
                dpCache.set(entity, (r = new RepositoryImplementation_js_1.RepositoryImplementation(entity, _this, dataProvider, (0, RepositoryImplementation_js_1.createOldEntity)(entity, _this))));
                (0, relationInfoMember_js_1.verifyFieldRelationInfo)(r, _this, dataProvider);
            }
            return r;
        };
        /** The current data provider */
        this.dataProvider = new rest_data_provider_js_1.RestDataProvider(function () { return _this.apiClient; });
        /* @internal */
        this.repCache = new Map();
        /* @internal*/
        this.liveQueryPublisher = {
            itemChanged: function () { return tslib_1.__awaiter(_this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/];
            }); }); },
        };
        /* @internal*/
        this.liveQuerySubscriber = new LiveQueryClient_js_1.LiveQueryClient(function () { return _this.apiClient; }, function () { var _a; return (_a = _this.user) === null || _a === void 0 ? void 0 : _a.id; });
        /** context information that can be used to store custom information that will be disposed as part of the `remult` object */
        this.context = {};
        /** The api client that will be used by `remult` to perform calls to the `api` */
        this.apiClient = {
            url: '/api',
            subscriptionClient: new SseSubscriptionClient_js_1.SseSubscriptionClient(),
        };
        if (provider && provider.getEntityDataProvider) {
            this.dataProvider = provider;
            return;
        }
        if ((0, buildRestDataProvider_js_1.isExternalHttpProvider)(provider)) {
            this.apiClient.httpClient = provider;
        }
        else if (typeof provider === 'function')
            this.apiClient.httpClient = provider;
        else if (provider) {
            var apiClient = provider;
            if (apiClient.httpClient)
                this.apiClient.httpClient = apiClient.httpClient;
            if (apiClient.url)
                this.apiClient.url = apiClient.url;
            if (apiClient.subscriptionClient)
                this.apiClient.subscriptionClient = apiClient.subscriptionClient;
            if (apiClient.wrapMessageHandling)
                this.apiClient.wrapMessageHandling = apiClient.wrapMessageHandling;
        }
    }
    /** Checks if a user was authenticated */
    Remult.prototype.authenticated = function () {
        var _a;
        return ((_a = this.user) === null || _a === void 0 ? void 0 : _a.id) !== undefined;
    };
    /** checks if the user has any of the roles specified in the parameters
     * @example
     * remult.isAllowed("admin")
     * @see
     * [Allowed](https://remult.dev/docs/allowed.html)
     */
    Remult.prototype.isAllowed = function (roles) {
        var e_1, _a;
        var _b, _c;
        if (roles == undefined)
            return undefined;
        if (roles instanceof Array) {
            try {
                for (var roles_1 = tslib_1.__values(roles), roles_1_1 = roles_1.next(); !roles_1_1.done; roles_1_1 = roles_1.next()) {
                    var role = roles_1_1.value;
                    if (this.isAllowed(role) === true) {
                        return true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (roles_1_1 && !roles_1_1.done && (_a = roles_1.return)) _a.call(roles_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return false;
        }
        if (typeof roles === 'function') {
            return roles(this);
        }
        if (typeof roles === 'boolean')
            return roles;
        if (typeof roles === 'string')
            if ((_c = (_b = this.user) === null || _b === void 0 ? void 0 : _b.roles) === null || _c === void 0 ? void 0 : _c.includes(roles.toString()))
                return true;
        return false;
    };
    /** checks if the user matches the allowedForInstance callback
     * @see
     * [Allowed](https://remult.dev/docs/allowed.html)
     */
    Remult.prototype.isAllowedForInstance = function (instance, allowed) {
        var e_2, _a;
        if (Array.isArray(allowed)) {
            {
                try {
                    for (var allowed_1 = tslib_1.__values(allowed), allowed_1_1 = allowed_1.next(); !allowed_1_1.done; allowed_1_1 = allowed_1.next()) {
                        var item = allowed_1_1.value;
                        if (this.isAllowedForInstance(instance, item))
                            return true;
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (allowed_1_1 && !allowed_1_1.done && (_a = allowed_1.return)) _a.call(allowed_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
        }
        else if (typeof allowed === 'function') {
            return allowed(instance, this);
        }
        else
            return this.isAllowed(allowed);
        return undefined;
    };
    //@ts-ignore // type error of typescript regarding args that doesn't appear in my normal development
    /** Used to call a `backendMethod` using a specific `remult` object
     * @example
     * await remult.call(TasksController.setAll, undefined, true);
     * @param backendMethod - the backend method to call
     * @param classInstance - the class instance of the backend method, for static backend methods use undefined
     * @param args - the arguments to send to the backend method
     */
    Remult.prototype.call = function (backendMethod, classInstance) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        var z = backendMethod[server_action_info_js_1.serverActionField];
        if (!z.doWork)
            throw Error('The method received is not a valid backend method');
        //@ts-ignore
        return z.doWork(args, classInstance, this.apiClient.url, (0, buildRestDataProvider_js_1.buildRestDataProvider)(this.apiClient.httpClient));
    };
    Remult.prototype.clearAllCache = function () {
        this.repCache.clear();
    };
    /** A helper callback that can be used to debug and trace all find operations. Useful in debugging scenarios */
    Remult.onFind = function (metadata, options) { };
    return Remult;
}());
exports.Remult = Remult;
remult_static_js_1.remultStatic.defaultRemultFactory = function () { return new Remult(); };
var ClassHelper = /** @class */ (function () {
    function ClassHelper() {
        this.classes = new Map();
    }
    return ClassHelper;
}());
exports.ClassHelper = ClassHelper;
function setControllerSettings(target, options) {
    var r = target;
    while (true) {
        var helper = remult_static_js_1.remultStatic.classHelpers.get(r);
        if (!helper)
            remult_static_js_1.remultStatic.classHelpers.set(r, (helper = new ClassHelper()));
        helper.classes.set(target, options);
        var p = Object.getPrototypeOf(r.prototype);
        if (p == null)
            break;
        r = p.constructor;
    }
}
exports.setControllerSettings = setControllerSettings;
var Allow = /** @class */ (function () {
    function Allow() {
    }
    Allow.everyone = function () { return true; };
    Allow.authenticated = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (args.length > 1) {
            return args[1].authenticated();
        }
        else if (args.length == 1) {
            if (args[0].authenticated)
                return args[0].authenticated();
        }
        return remult_proxy_js_1.remult.authenticated();
    };
    return Allow;
}());
exports.Allow = Allow;
exports.queryConfig = {
    defaultPageSize: 200,
};
var EventSource = /** @class */ (function () {
    function EventSource() {
        var _this = this;
        this.listeners = [];
        this.dispatcher = {
            observe: function (what) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                var _this = this;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.listeners.push(what);
                            return [4 /*yield*/, what()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/, function () {
                                    _this.listeners = _this.listeners.filter(function (x) { return x != what; });
                                }];
                    }
                });
            }); },
        };
    }
    EventSource.prototype.fire = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, _b, l, e_3_1;
            var e_3, _c;
            return tslib_1.__generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _d.trys.push([0, 5, 6, 7]);
                        _a = tslib_1.__values(this.listeners), _b = _a.next();
                        _d.label = 1;
                    case 1:
                        if (!!_b.done) return [3 /*break*/, 4];
                        l = _b.value;
                        return [4 /*yield*/, l()];
                    case 2:
                        _d.sent();
                        _d.label = 3;
                    case 3:
                        _b = _a.next();
                        return [3 /*break*/, 1];
                    case 4: return [3 /*break*/, 7];
                    case 5:
                        e_3_1 = _d.sent();
                        e_3 = { error: e_3_1 };
                        return [3 /*break*/, 7];
                    case 6:
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        }
                        finally { if (e_3) throw e_3.error; }
                        return [7 /*endfinally*/];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    return EventSource;
}());
exports.EventSource = EventSource;
function doTransaction(remult, what) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var trans, ok, prev;
        var _this = this;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    trans = new transactionLiveQueryPublisher(remult.liveQueryPublisher);
                    ok = true;
                    prev = remult.dataProvider;
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, , 5, 6]);
                    return [4 /*yield*/, remult.dataProvider.transaction(function (ds) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                            return tslib_1.__generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        remult.dataProvider = ds;
                                        remult.liveQueryPublisher = trans;
                                        return [4 /*yield*/, what(ds)];
                                    case 1:
                                        _a.sent();
                                        ok = true;
                                        return [2 /*return*/];
                                }
                            });
                        }); })];
                case 2:
                    _a.sent();
                    if (!ok) return [3 /*break*/, 4];
                    return [4 /*yield*/, trans.flush()];
                case 3:
                    _a.sent();
                    _a.label = 4;
                case 4: return [3 /*break*/, 6];
                case 5:
                    remult.dataProvider = prev;
                    return [7 /*endfinally*/];
                case 6: return [2 /*return*/];
            }
        });
    });
}
exports.doTransaction = doTransaction;
var transactionLiveQueryPublisher = /** @class */ (function () {
    function transactionLiveQueryPublisher(orig) {
        this.orig = orig;
        this.transactionItems = new Map();
    }
    transactionLiveQueryPublisher.prototype.itemChanged = function (entityKey, changes) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var items, _loop_1, changes_1, changes_1_1, c;
            var e_4, _a;
            return tslib_1.__generator(this, function (_b) {
                items = this.transactionItems.get(entityKey);
                if (!items) {
                    this.transactionItems.set(entityKey, (items = []));
                }
                _loop_1 = function (c) {
                    if (c.oldId !== undefined) {
                        var item = items.find(function (y) { return y.id === c.oldId; });
                        if (item !== undefined) {
                            if (c.deleted)
                                item.deleted = true;
                            if (c.id != item.id)
                                item.id = c.id;
                        }
                        else
                            items.push(c);
                    }
                    else
                        items.push(c);
                };
                try {
                    for (changes_1 = tslib_1.__values(changes), changes_1_1 = changes_1.next(); !changes_1_1.done; changes_1_1 = changes_1.next()) {
                        c = changes_1_1.value;
                        _loop_1(c);
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (changes_1_1 && !changes_1_1.done && (_a = changes_1.return)) _a.call(changes_1);
                    }
                    finally { if (e_4) throw e_4.error; }
                }
                return [2 /*return*/];
            });
        });
    };
    transactionLiveQueryPublisher.prototype.flush = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, _b, key, e_5_1;
            var e_5, _c;
            return tslib_1.__generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _d.trys.push([0, 5, 6, 7]);
                        _a = tslib_1.__values(this.transactionItems.keys()), _b = _a.next();
                        _d.label = 1;
                    case 1:
                        if (!!_b.done) return [3 /*break*/, 4];
                        key = _b.value;
                        return [4 /*yield*/, this.orig.itemChanged(key, this.transactionItems.get(key))];
                    case 2:
                        _d.sent();
                        _d.label = 3;
                    case 3:
                        _b = _a.next();
                        return [3 /*break*/, 1];
                    case 4: return [3 /*break*/, 7];
                    case 5:
                        e_5_1 = _d.sent();
                        e_5 = { error: e_5_1 };
                        return [3 /*break*/, 7];
                    case 6:
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        }
                        finally { if (e_5) throw e_5.error; }
                        return [7 /*endfinally*/];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    return transactionLiveQueryPublisher;
}());
function withRemult(callback, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var remult, _a;
        var _this = this;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    remult = new Remult();
                    _a = remult;
                    return [4 /*yield*/, (0, initDataProvider_js_1.initDataProvider)(options === null || options === void 0 ? void 0 : options.dataProvider, true, function () { return tslib_1.__awaiter(_this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
                            return [2 /*return*/, remult.dataProvider];
                        }); }); })];
                case 1:
                    _a.dataProvider = _b.sent();
                    return [2 /*return*/, remult_static_js_1.remultStatic.asyncContext.run(remult, function (r) { return callback(r); })];
            }
        });
    });
}
exports.withRemult = withRemult;
