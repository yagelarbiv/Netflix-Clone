import type { ClassType } from '../classType.js';
import type { DataProvider } from './data-interfaces.js';
import type { EntityMetadata, EntityRef, FindOptions, Repository } from './remult3/remult3.js';
import type { ExternalHttpProvider } from './buildRestDataProvider.js';
import type { SubscriptionClient, Unsubscribe } from './live-query/SubscriptionChannel.js';
import type { LiveQueryStorage, SubscriptionServer } from './live-query/SubscriptionServer.js';
export declare class RemultAsyncLocalStorage {
    private readonly remultObjectStorage;
    static enable(): void;
    static disable(): void;
    constructor(remultObjectStorage: RemultAsyncLocalStorageCore<{
        remult: Remult;
        inInitRequest?: boolean;
    }>);
    run<T>(remult: Remult, callback: (remult: Remult) => Promise<T>): Promise<T>;
    isInInitRequest(): boolean;
    setInInitRequest(val: boolean): void;
    getStore(): {
        remult: Remult;
        inInitRequest?: boolean;
    };
}
export type RemultAsyncLocalStorageCore<T> = {
    run<R>(store: T, callback: () => Promise<R>): Promise<R>;
    getStore(): T | undefined;
    wasImplemented: 'yes';
};
export declare function isBackend(): boolean;
export declare class Remult {
    /**Return's a `Repository` of the specific entity type
     * @example
     * const taskRepo = remult.repo(Task);
     * @see [Repository](https://remult.dev/docs/ref_repository.html)
     * @param entity - the entity to use
     * @param dataProvider - an optional alternative data provider to use. Useful for writing to offline storage or an alternative data provider
     */
    repo: <T>(entity: ClassType<T>, dataProvider?: DataProvider) => Repository<T>;
    /** Returns the current user's info */
    user?: UserInfo;
    /** Checks if a user was authenticated */
    authenticated(): boolean;
    /** checks if the user has any of the roles specified in the parameters
     * @example
     * remult.isAllowed("admin")
     * @see
     * [Allowed](https://remult.dev/docs/allowed.html)
     */
    isAllowed(roles?: Allowed): boolean;
    /** checks if the user matches the allowedForInstance callback
     * @see
     * [Allowed](https://remult.dev/docs/allowed.html)
     */
    isAllowedForInstance(instance: any, allowed?: AllowedForInstance<any>): boolean;
    /** The current data provider */
    dataProvider: DataProvider;
    /** Creates a new instance of the `remult` object.
     *
     * Can receive either an HttpProvider or a DataProvider as a parameter - which will be used to fetch data from.
     *
     * If no provider is specified, `fetch` will be used as an http provider
     */
    constructor(http: ExternalHttpProvider | typeof fetch | ApiClient);
    constructor(p: DataProvider);
    constructor();
    liveQueryStorage?: LiveQueryStorage;
    subscriptionServer?: SubscriptionServer;
    /** Used to call a `backendMethod` using a specific `remult` object
     * @example
     * await remult.call(TasksController.setAll, undefined, true);
     * @param backendMethod - the backend method to call
     * @param classInstance - the class instance of the backend method, for static backend methods use undefined
     * @param args - the arguments to send to the backend method
     */
    call<T extends (...args: any[]) => Promise<any>>(backendMethod: T, classInstance?: any, ...args: GetArguments<T>): ReturnType<T>;
    /** A helper callback that can be used to debug and trace all find operations. Useful in debugging scenarios */
    static onFind: (metadata: EntityMetadata, options: FindOptions<any>) => void;
    clearAllCache(): any;
    /** A helper callback that is called whenever an entity is created. */
    static entityRefInit?: (ref: EntityRef<any>, row: any) => void;
    /** context information that can be used to store custom information that will be disposed as part of the `remult` object */
    readonly context: RemultContext;
    /** The api client that will be used by `remult` to perform calls to the `api` */
    apiClient: ApiClient;
}
export type GetArguments<T> = T extends (...args: infer FirstArgument) => any ? FirstArgument : never;
export interface RemultContext {
}
/**
 * Interface for configuring the API client used by Remult to perform HTTP calls to the backend.
 */
export interface ApiClient {
    /**
     * The HTTP client to use when making API calls. It can be set to a function with the `fetch` signature
     * or an object that has `post`, `put`, `delete`, and `get` methods. This can also be used to inject
     * logic before each HTTP call, such as adding authorization headers.
     *
     * @example
     * // Using Axios
     * remult.apiClient.httpClient = axios;
     *
     * @example
     * // Using Angular HttpClient
     * remult.apiClient.httpClient = httpClient;
     * @see
     * If you want to add headers using angular httpClient, see: https://medium.com/angular-shots/shot-3-how-to-add-http-headers-to-every-request-in-angular-fab3d10edc26
     *
     * @example
     * // Using fetch (default)
     * remult.apiClient.httpClient = fetch;
     *
     * @example
     * // Adding bearer token authorization
     * remult.apiClient.httpClient = (
     *   input: RequestInfo | URL,
     *   init?: RequestInit
     * ) => {
     *   return fetch(input, {
     *     ...init,
     *     headers: authToken
     *       ? {
     *           ...init?.headers,
     *           authorization: 'Bearer ' + authToken,
     *         }
     *       : init?.headers,
     *
     *     cache: 'no-store',
     *   })
     * }
     */
    httpClient?: ExternalHttpProvider | typeof fetch;
    /**
     * The base URL for making API calls. By default, it is set to '/api'. It can be modified to be relative
     * or to use a different domain for the server.
     *
     * @example
     * // Relative URL
     * remult.apiClient.url = './api';
     *
     * @example
     * // Different domain
     * remult.apiClient.url = 'https://example.com/api';
     */
    url?: string;
    /**
     * The subscription client used for real-time data updates. By default, it is set to use Server-Sent Events (SSE).
     * It can be set to any subscription provider as illustrated in the Remult tutorial for deploying to a serverless environment.
     *
     * @see https://remult.dev/tutorials/react-next/deployment.html#deploying-to-a-serverless-environment
     */
    subscriptionClient?: SubscriptionClient;
    /**
     * A function that wraps message handling for subscriptions. This is useful for executing some code before
     * or after any message arrives from the subscription.
     * For example, in Angular, to refresh a specific part of the UI,
     * you can call the `NgZone` run method at this time.
     *
     * @example
     * // Angular example
     * import { Component, NgZone } from '@angular/core';
     * import { remult } from "remult";
     *
     * export class AppComponent {
     *   constructor(zone: NgZone) {
     *     remult.apiClient.wrapMessageHandling = handler => zone.run(() => handler());
     *   }
     * }
     */
    wrapMessageHandling?: (x: VoidFunction) => void;
}
export interface ControllerOptions {
    key: string;
}
export declare class ClassHelper {
    classes: Map<any, ControllerOptions>;
}
export declare function setControllerSettings(target: any, options: ControllerOptions): void;
export interface UserInfo {
    id: string;
    name?: string;
    roles?: string[];
}
export declare type Allowed = boolean | string | string[] | ((c?: Remult) => boolean);
export declare type AllowedForInstance<T> = boolean | string | string[] | ((entity?: T, c?: Remult) => boolean);
export declare class Allow {
    static everyone: () => boolean;
    static authenticated: (...args: any[]) => any;
}
export declare const queryConfig: {
    defaultPageSize: number;
};
export interface EventDispatcher {
    observe(what: () => any | Promise<any>): Promise<Unsubscribe>;
}
export declare class EventSource {
    listeners: (() => {})[];
    fire(): Promise<void>;
    dispatcher: EventDispatcher;
}
export interface itemChange {
    id: any;
    oldId: any;
    deleted: boolean;
}
export declare function doTransaction(remult: Remult, what: (dp: DataProvider) => Promise<void>): Promise<void>;
export declare function withRemult<T>(callback: (remult: any) => Promise<T>, options?: {
    dataProvider?: DataProvider | Promise<DataProvider> | (() => Promise<DataProvider | undefined>);
}): Promise<T>;
