"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.flags = void 0;
exports.flags = {
    error500RetryCount: 4,
};
/*y1 - https://github.com/remult/remult/discussions/438
     - https://github.com/remult/remult/blob/query-argumets/projects/tests/dbs/test-sql-database.spec.ts#L100-L128
*/
//y1 - consider sql expression gets a dbnames of it's own (that already has the "tableName" defined correctly) maybe also the filter translator
//y2 - soft-delete-discussion https://discord.com/channels/975754286384418847/1230386433093533698/1230386433093533698
//p1 - fix query docs to also explain how it can be used for infinite scroll and pagination.
//y1 - 'test expression columns without aliases'
//y1 - live query update waits for last
//p1 - add luid - it's cool for order by. - NO
//p1 - replace uuid with crypto.randomUUID and allow custom fallback NO
//p1 - add nanoid - NO
//p1 - add id and use luid by default, but allow changes with Fields.id.defaultIdProvider NO but defaultProvider yes
//p1 - explain the benefits of changing the default provider for testing in docs.
//p1 - fix sqlite to  support alter table when adding a column with ensure schema = on
//p1 - fix app custom filters example for multiple filters.
//p1 - add not!!!!
//p1 - add LifecycleEvent to documentation
//p1 - Fix hagai and starter project to latest ts
//p1 - fix chaining of saving and saved in multiple entity options args
//p1 - review starter and examples and separate remult * auth from the routes
//p1 - min, max, avg, sum
//p1 - consider upsert (where,set)
//y1 - live query with count #436
//y1 TODO - In the esm version of our tutorial - the imports are automatically .ts and not .js in react and not in vue
//y1 TODO - consider id to also support keyof (id:['company','index']) - had problem with | (keyof Partial<entityType>)[] & `entity`
//y1 TODO - readonly key: keyof MembersOnly<entityType> & string
//y1 TODO - fix remult admin not to load the html into memory until used
//y2 - talk about insert / update / delete with relations
/*
repo(Order).insert({},{
  relations:{
    orderItems:[{},{},{}]
  }
})
*/
//y2 - repo batch - for multiple operations:
/*
const result = await repo.batch(x=>({
  data:x.find(),
  count:x.count()
}))
*/
//y1 - wait a second to close stream -see pr
//p1 - Consider enforcing serial operations on JSON database to prevent data loss
//p1 - prepare the createEntity discussion
//p1 - return error on connection error
//p1 - article on displayValue including it's definition for entities that is used in relations
//p1 - article auth.js with express - played with it, requires type="module" and a few more configurations - https://github.com/noam-honig/express-auth
//y2 - currently for string fields we default for 255 in knex (which is their default) why not just use text (varchar max) - and only use exact length when one is provided?
//p2 - create foreign key constraints in user code - https://codesandbox.io/p/devbox/fk-validator-tdshcs
//p2 - admin url1 - pocketbase use /_ for the admin //{allowed?:Allowed,url?:string} also checkout the admin* as it should probably be something else and didn't work in hono
//y2 - fix validators cache
//y2 - should we validate relations
//y1 - dependency of live query tables  live query refresh of view on table update
//p1 - see why mongo tests do not run anymore
//y2 - consider replacing all errors with error classes that extend the base Error class
//y2 - should enforce integer - currently we probably round / truncate it
//y1 - talk about filter on objects that are not loaded -  {
//category: repo(CompoundId).create({ company: 7, index: 3, name: '' }),
//    }
/*y1 - talk about modules in init express with entities/controllers,initRequest,initApi
 - support get with backend method, with url search params as the first parameter, & url as second parameter
   - support returning redirect, and plain html (For sign in scenarios)

 */
//p1 - in this video I'll use remult to turn a frontend app to a fullstack app
/*y2 - Talk JYC - JYC - add some integrity checks on delete
  - soft delete
  - delete restrict (implicit, or user selected - and if so, how) (delete & update of id)

*/
//y1 - tried to upgrade vitest, nuxt tests are failing with loading uuid - sounds familiar?
//y1 - talk about the parameter issue with backend methods
//y2 - livequery for findfirst (@JY)
/*y2 -
//y2 - allow api update only for new rows
  @Fields.string<Category>({
    allowApiUpdate: (c) => getEntityRef(c).isNew(),
  })
  Description = ""*/
//y2 - get backend methods to work when specifying types for date, and entities as poco's
//y2 - constraints (@JY)
//p1 - when a tasks table exists in a different schema - we get many errors
//p1 - live query with include
//p1 - adjust angular tutorial starter kit for latest angular (as is in tutorial)
//y2 - Fix problem with promise all in sql expression recurssion - when using PromiseAll in row relation loading, some sql expressions appear is recursion call even if they are not
//p2 - when subscribe is forbidden - the query still runs after the renew process
//p2 - 'update tasks set  where id = $1
//p2 - type metadata.key - to keyof entity - based on cwis input
//y2 - remove __dirname from tutorials
//p2 - when value changes for field with error, clear error - so the user will feel comfortable
//p2 - allowApiUpdate should be false for include in api false
//docs
//------
//y2 - wrap identifier for custom filter & sql expression
//y2 - Should we create a separate implementation of command - one that the user uses, and another that the database implements (with only the bear necesities) - for example, to provide a second paramter called field for toDb conversions
//y2 - should we simply inherit from SqlDataProvider - and send the required parameter in the call to the base class - I think that new SqlDatabase(new PostgresDataProvider()) is a bilt combersome
//y2 - from the crm-demo(https://crm-demo.up.railway.app/deals), after editing a deal: - _updateEntityBasedOnApi
//y1 - Backend methods are transactions, it's not intuitive and maybe should be optional / opt in (https://github.com/remult/remult/issues/466)
//y1 - how to run a transaction as a user
//y2 - message for relation that is missing
//y2 - consider multi tenancies
//p2 - and validators to reference
//y2 - discuss a default date formatter
//y2 - add some api testing framework for user unit tests (will help with codesandbox based discussions)
//[ ] V2 - what to do about for relations count?
//[ ] V2 - condition? not to fetch if null etc....
