"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.__updateEntityBasedOnWhere = exports.buildFilterFromRequestParameters = exports.entityFilterToJson = exports.FilterSerializer = exports.customDatabaseFilterToken = exports.customUrlToken = exports.NotFilter = exports.OrFilter = exports.AndFilter = exports.Filter = void 0;
var tslib_1 = require("tslib");
var getEntityRef_js_1 = require("../remult3/getEntityRef.js");
var relationInfoMember_js_1 = require("../remult3/relationInfoMember.js");
/**
 * The `Filter` class is a helper class that focuses on filter-related concerns. It provides methods
 * for creating and applying filters in queries.
 */
var Filter = /** @class */ (function () {
    function Filter(apply) {
        this.apply = apply;
    }
    //@internal
    Filter.throwErrorIfFilterIsEmpty = function (where, methodName) {
        if (Filter.isFilterEmpty(where)) {
            throw {
                message: "".concat(methodName, ": requires a filter to protect against accidental delete/update of all rows"),
                httpStatusCode: 400,
            };
        }
    };
    //@internal
    Filter.isFilterEmpty = function (where) {
        var e_1, _a, e_2, _b;
        if (where.$and) {
            try {
                for (var _c = tslib_1.__values(where.$and), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var a = _d.value;
                    if (!Filter.isFilterEmpty(a)) {
                        return false;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        if (where.$or) {
            try {
                for (var _e = tslib_1.__values(where.$or), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var a = _f.value;
                    if (Filter.isFilterEmpty(a)) {
                        return true;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                }
                finally { if (e_2) throw e_2.error; }
            }
            return false;
        }
        if (Object.keys(where).filter(function (x) { return !['$or', '$and'].includes(x); }).length == 0) {
            return true;
        }
        return false;
    };
    /**
     * Retrieves precise values for each property in a filter for an entity.
     * @template entityType The type of the entity being filtered.
     * @param metadata The metadata of the entity being filtered.
     * @param filter The filter to analyze.
     * @returns A promise that resolves to a FilterPreciseValues object containing the precise values for each property.
     * @example
     * const preciseValues = await Filter.getPreciseValues(meta, {
     *   status: { $ne: 'active' },
     *   $or: [
     *     { customerId: ["1", "2"] },
     *     { customerId: "3" }
     *   ]
     * });
     * console.log(preciseValues);
     * // Output:
     * // {
     * //   "customerId": ["1", "2", "3"], // Precise values inferred from the filter
     * //   "status": undefined,           // Cannot infer precise values for 'status'
     * // }
    
     */
    Filter.getPreciseValues = function (metadata, filter) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var result;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        result = new preciseValuesCollector();
                        return [4 /*yield*/, Filter.fromEntityFilter(metadata, filter).__applyToConsumer(result)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, result.preciseValues];
                }
            });
        });
    };
    /**
     * Retrieves precise values for each property in a filter for an entity.
     * @template entityType The type of the entity being filtered.
     * @param metadata The metadata of the entity being filtered.
     * @param filter The filter to analyze.
     * @returns A promise that resolves to a FilterPreciseValues object containing the precise values for each property.
     * @example
     * const preciseValues = await where.getPreciseValues();
     * console.log(preciseValues);
     * // Output:
     * // {
     * //   "customerId": ["1", "2", "3"], // Precise values inferred from the filter
     * //   "status": undefined,           // Cannot infer precise values for 'status'
     * // }
    
     */
    Filter.prototype.getPreciseValues = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var result;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        result = new preciseValuesCollector();
                        return [4 /*yield*/, this.__applyToConsumer(result)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, result.preciseValues];
                }
            });
        });
    };
    Filter.createCustom = function (translator, key) {
        if (key === void 0) { key = ''; }
        var rawFilterInfo = { key: key, rawFilterTranslator: translator };
        return Object.assign(function (x) {
            var _a;
            var z = {};
            if (x == undefined)
                x = {};
            if (!rawFilterInfo.key)
                throw 'Usage of custom filter before a key was assigned to it';
            return _a = {},
                _a[exports.customUrlToken + rawFilterInfo.key] = x,
                _a;
        }, { rawFilterInfo: rawFilterInfo });
    };
    /**
     * Translates an `EntityFilter` to a plain JSON object that can be stored or transported.
     *
     * @template T The entity type for the filter.
     * @param {EntityMetadata<T>} entityDefs The metadata of the entity associated with the filter.
     * @param {EntityFilter<T>} where The `EntityFilter` to be translated.
     * @returns {any} A plain JSON object representing the `EntityFilter`.
     *
     * @example
     * // Assuming `Task` is an entity class
     * const jsonFilter = Filter.entityFilterToJson(Task, { completed: true });
     * // `jsonFilter` can now be stored or transported as JSON
     */
    Filter.entityFilterToJson = function (entityDefs, where) {
        return Filter.fromEntityFilter(entityDefs, where).toJson();
    };
    /**
     * Translates a plain JSON object back into an `EntityFilter`.
     *
     * @template T The entity type for the filter.
     * @param {EntityMetadata<T>} entityDefs The metadata of the entity associated with the filter.
     * @param {any} packed The plain JSON object representing the `EntityFilter`.
     * @returns {EntityFilter<T>} The reconstructed `EntityFilter`.
     *
     * @example
     * // Assuming `Task` is an entity class and `jsonFilter` is a JSON object representing an EntityFilter
     * const taskFilter = Filter.entityFilterFromJson(Task, jsonFilter);
     * // Using the reconstructed `EntityFilter` in a query
     * const tasks = await remult.repo(Task).find({ where: taskFilter });
     * for (const task of tasks) {
     *   // Do something for each task based on the filter
     * }
     */
    Filter.entityFilterFromJson = function (entityDefs, packed) {
        return buildFilterFromRequestParameters(entityDefs, {
            get: function (key) { return packed[key]; },
        });
    };
    /**
     * Converts an `EntityFilter` to a `Filter` that can be used by the `DataProvider`. This method is
     * mainly used internally.
     *
     * @template T The entity type for the filter.
     * @param {EntityMetadata<T>} entity The metadata of the entity associated with the filter.
     * @param {EntityFilter<T>} whereItem The `EntityFilter` to be converted.
     * @returns {Filter} A `Filter` instance that can be used by the `DataProvider`.
     *
     * @example
     * // Assuming `Task` is an entity class and `taskFilter` is an EntityFilter
     * const filter = Filter.fromEntityFilter(Task, taskFilter);
     * // `filter` can now be used with the DataProvider
     */
    Filter.fromEntityFilter = function (entity, whereItem) {
        var result = [];
        var _loop_1 = function (key) {
            if (Object.prototype.hasOwnProperty.call(whereItem, key)) {
                var fieldToFilter_1 = whereItem[key];
                {
                    if (key == '$or') {
                        result.push(new (OrFilter.bind.apply(OrFilter, tslib_1.__spreadArray([void 0], tslib_1.__read(fieldToFilter_1.map(function (x) { return Filter.fromEntityFilter(entity, x); })), false)))());
                    }
                    else if (key == '$not') {
                        result.push(new NotFilter(Filter.fromEntityFilter(entity, fieldToFilter_1)));
                    }
                    else if (key == '$and') {
                        result.push(new (AndFilter.bind.apply(AndFilter, tslib_1.__spreadArray([void 0], tslib_1.__read(fieldToFilter_1.map(function (x) { return Filter.fromEntityFilter(entity, x); })), false)))());
                    }
                    else if (key.startsWith(exports.customUrlToken)) {
                        result.push(new Filter(function (x) {
                            x.custom(key.substring(exports.customUrlToken.length), fieldToFilter_1);
                        }));
                    }
                    else if (key == exports.customDatabaseFilterToken) {
                        result.push(new Filter(function (x) { return x.databaseCustom(fieldToFilter_1); }));
                    }
                    else {
                        var field = entity.fields[key];
                        var rel = (0, relationInfoMember_js_1.getRelationFieldInfo)(field);
                        var op = field.options;
                        var fh = (rel === null || rel === void 0 ? void 0 : rel.type) === 'toOne'
                            ? op.fields
                                ? new manyToOneFilterHelper(field, entity.fields, op)
                                : new toOneFilterHelper(entity.fields[op.field])
                            : new filterHelper(field);
                        var found = false;
                        if (fieldToFilter_1 !== undefined && fieldToFilter_1 != null) {
                            if (fieldToFilter_1.$id !== undefined)
                                fieldToFilter_1 = fieldToFilter_1.$id;
                            for (var key_1 in fieldToFilter_1) {
                                if (Object.prototype.hasOwnProperty.call(fieldToFilter_1, key_1)) {
                                    var element = fieldToFilter_1[key_1];
                                    switch (key_1) {
                                        case '$gte':
                                        case '>=':
                                            result.push(fh.isGreaterOrEqualTo(element));
                                            found = true;
                                            break;
                                        case '$gt':
                                        case '>':
                                            result.push(fh.isGreaterThan(element));
                                            found = true;
                                            break;
                                        case '$lte':
                                        case '<=':
                                            result.push(fh.isLessOrEqualTo(element));
                                            found = true;
                                            break;
                                        case '$lt':
                                        case '<':
                                            result.push(fh.isLessThan(element));
                                            found = true;
                                            break;
                                        case '$ne':
                                        case '!=':
                                        case '$nin':
                                            found = true;
                                            if (Array.isArray(element)) {
                                                result.push(fh.isNotIn(element));
                                            }
                                            else
                                                result.push(fh.isDifferentFrom(element));
                                            break;
                                        case '$in':
                                            found = true;
                                            result.push(fh.isIn(element));
                                            break;
                                        case '$contains':
                                            found = true;
                                            result.push(fh.contains(element));
                                            break;
                                        case '$startsWith':
                                            found = true;
                                            result.push(fh.startsWith(element));
                                            break;
                                        case '$endsWith':
                                            found = true;
                                            result.push(fh.endsWith(element));
                                            break;
                                        case '$notContains':
                                            found = true;
                                            result.push(fh.notContains(element));
                                            break;
                                    }
                                }
                            }
                            if (Array.isArray(fieldToFilter_1)) {
                                found = true;
                                result.push(fh.isIn(fieldToFilter_1));
                            }
                        }
                        if (!found && fieldToFilter_1 !== undefined) {
                            result.push(fh.isEqualTo(fieldToFilter_1));
                        }
                    }
                }
            }
        };
        for (var key in whereItem) {
            _loop_1(key);
        }
        return new (AndFilter.bind.apply(AndFilter, tslib_1.__spreadArray([void 0], tslib_1.__read(result), false)))();
    };
    Filter.prototype.__applyToConsumer = function (add) {
        this.apply(add);
    };
    /**
     * Resolves an entity filter.
     *
     * This method takes a filter which can be either an instance of `EntityFilter`
     * or a function that returns an instance of `EntityFilter` or a promise that
     * resolves to an instance of `EntityFilter`. It then resolves the filter if it
     * is a function and returns the resulting `EntityFilter`.
     *
     * @template entityType The type of the entity that the filter applies to.
     * @param {EntityFilter<entityType> | (() => EntityFilter<entityType> | Promise<EntityFilter<entityType>>)} filter The filter to resolve.
     * @returns {Promise<EntityFilter<entityType>>} The resolved entity filter.
     */
    Filter.resolve = function (filter) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(typeof filter === 'function')) return [3 /*break*/, 2];
                        return [4 /*yield*/, filter()];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2: return [2 /*return*/, filter];
                }
            });
        });
    };
    Filter.prototype.toJson = function () {
        var r = new FilterSerializer();
        this.__applyToConsumer(r);
        return r.result;
    };
    //@internal
    Filter.translateCustomWhere = function (r, entity, remult) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var f;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        f = new customTranslator(function (filterKey, custom) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                            var r, _a, _b, _c, _i, key, element, _d, _e, _f, _g, _h;
                            return tslib_1.__generator(this, function (_j) {
                                switch (_j.label) {
                                    case 0:
                                        r = [];
                                        _a = entity.entityType;
                                        _b = [];
                                        for (_c in _a)
                                            _b.push(_c);
                                        _i = 0;
                                        _j.label = 1;
                                    case 1:
                                        if (!(_i < _b.length)) return [3 /*break*/, 5];
                                        _c = _b[_i];
                                        if (!(_c in _a)) return [3 /*break*/, 4];
                                        key = _c;
                                        element = entity.entityType[key];
                                        if (!(element &&
                                            element.rawFilterInfo &&
                                            element.rawFilterInfo.rawFilterTranslator)) return [3 /*break*/, 4];
                                        if (!(element.rawFilterInfo.key == filterKey)) return [3 /*break*/, 4];
                                        _e = (_d = r).push;
                                        _g = (_f = Filter).fromEntityFilter;
                                        _h = [entity];
                                        return [4 /*yield*/, element.rawFilterInfo.rawFilterTranslator(custom, remult)];
                                    case 2: return [4 /*yield*/, _g.apply(_f, _h.concat([_j.sent()]))];
                                    case 3:
                                        _e.apply(_d, [_j.sent()]);
                                        _j.label = 4;
                                    case 4:
                                        _i++;
                                        return [3 /*break*/, 1];
                                    case 5: return [2 /*return*/, r];
                                }
                            });
                        }); });
                        r.__applyToConsumer(f);
                        return [4 /*yield*/, f.resolve()];
                    case 1:
                        _a.sent();
                        r = new Filter(function (x) { return f.applyTo(x); });
                        return [2 /*return*/, r];
                }
            });
        });
    };
    return Filter;
}());
exports.Filter = Filter;
var filterHelper = /** @class */ (function () {
    function filterHelper(metadata) {
        this.metadata = metadata;
    }
    filterHelper.prototype.processVal = function (val) {
        var ei = (0, getEntityRef_js_1.getEntitySettings)(this.metadata.valueType, false);
        if (ei) {
            if (val === undefined || val === null) {
                if (val === null && !this.metadata.allowNull) {
                    var rel = (0, relationInfoMember_js_1.getRelationFieldInfo)(this.metadata);
                    if ((rel === null || rel === void 0 ? void 0 : rel.type) === 'reference')
                        if (rel.toRepo.metadata.idMetadata.field.options.valueType === Number)
                            return 0;
                        else
                            return '';
                }
                return null;
            }
            if (typeof val === 'string' || typeof val === 'number')
                return val;
            return (0, getEntityRef_js_1.getEntityRef)(val).getId();
        }
        return val;
    };
    filterHelper.prototype.contains = function (val) {
        var _this = this;
        return new Filter(function (add) { return add.containsCaseInsensitive(_this.metadata, val); });
    };
    filterHelper.prototype.notContains = function (val) {
        var _this = this;
        return new Filter(function (add) {
            return add.notContainsCaseInsensitive(_this.metadata, val);
        });
    };
    filterHelper.prototype.startsWith = function (val) {
        var _this = this;
        return new Filter(function (add) {
            return add.startsWithCaseInsensitive(_this.metadata, val);
        });
    };
    filterHelper.prototype.endsWith = function (val) {
        var _this = this;
        return new Filter(function (add) { return add.endsWithCaseInsensitive(_this.metadata, val); });
    };
    filterHelper.prototype.isLessThan = function (val) {
        var _this = this;
        val = this.processVal(val);
        return new Filter(function (add) { return add.isLessThan(_this.metadata, val); });
    };
    filterHelper.prototype.isGreaterOrEqualTo = function (val) {
        var _this = this;
        val = this.processVal(val);
        return new Filter(function (add) { return add.isGreaterOrEqualTo(_this.metadata, val); });
    };
    filterHelper.prototype.isNotIn = function (values) {
        var _this = this;
        return new Filter(function (add) {
            var e_3, _a;
            try {
                for (var values_1 = tslib_1.__values(values), values_1_1 = values_1.next(); !values_1_1.done; values_1_1 = values_1.next()) {
                    var v = values_1_1.value;
                    add.isDifferentFrom(_this.metadata, _this.processVal(v));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (values_1_1 && !values_1_1.done && (_a = values_1.return)) _a.call(values_1);
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    };
    filterHelper.prototype.isDifferentFrom = function (val) {
        var _this = this;
        val = this.processVal(val);
        if ((val === null || val === undefined) && this.metadata.allowNull)
            return new Filter(function (add) { return add.isNotNull(_this.metadata); });
        return new Filter(function (add) { return add.isDifferentFrom(_this.metadata, val); });
    };
    filterHelper.prototype.isLessOrEqualTo = function (val) {
        var _this = this;
        val = this.processVal(val);
        return new Filter(function (add) { return add.isLessOrEqualTo(_this.metadata, val); });
    };
    filterHelper.prototype.isGreaterThan = function (val) {
        var _this = this;
        val = this.processVal(val);
        return new Filter(function (add) { return add.isGreaterThan(_this.metadata, val); });
    };
    filterHelper.prototype.isEqualTo = function (val) {
        var _this = this;
        val = this.processVal(val);
        if ((val === null || val === undefined) && this.metadata.allowNull)
            return new Filter(function (add) { return add.isNull(_this.metadata); });
        return new Filter(function (add) { return add.isEqualTo(_this.metadata, val); });
    };
    filterHelper.prototype.isIn = function (val) {
        var _this = this;
        val = val.map(function (x) { return _this.processVal(x); });
        if ((val === null || val === void 0 ? void 0 : val.length) == 1 && val[0] != undefined && val[0] !== null)
            return new Filter(function (add) { return add.isEqualTo(_this.metadata, val[0]); });
        return new Filter(function (add) { return add.isIn(_this.metadata, val); });
    };
    return filterHelper;
}());
var toOneFilterHelper = /** @class */ (function (_super) {
    tslib_1.__extends(toOneFilterHelper, _super);
    function toOneFilterHelper() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    toOneFilterHelper.prototype.processVal = function (val) {
        if (!val)
            return null;
        if (typeof val === 'string' || typeof val === 'number')
            return val;
        return (0, getEntityRef_js_1.getEntityRef)(val).getId();
    };
    return toOneFilterHelper;
}(filterHelper));
var manyToOneFilterHelper = /** @class */ (function () {
    function manyToOneFilterHelper(metadata, fields, relationOptions) {
        this.metadata = metadata;
        this.fields = fields;
        this.relationOptions = relationOptions;
    }
    manyToOneFilterHelper.prototype.processVal = function (val) {
        throw new Error('Invalid for Many To One Relation Field');
    };
    manyToOneFilterHelper.prototype.contains = function (val) {
        throw new Error('Invalid for Many To One Relation Field');
    };
    manyToOneFilterHelper.prototype.notContains = function (val) {
        throw new Error('Invalid for Many To One Relation Field');
    };
    manyToOneFilterHelper.prototype.endsWith = function (val) {
        throw new Error('Invalid for Many To One Relation Field');
    };
    manyToOneFilterHelper.prototype.startsWith = function (val) {
        throw new Error('Invalid for Many To One Relation Field');
    };
    manyToOneFilterHelper.prototype.isLessThan = function (val) {
        throw new Error('Invalid for Many To One Relation Field');
    };
    manyToOneFilterHelper.prototype.isGreaterOrEqualTo = function (val) {
        throw new Error('Invalid for Many To One Relation Field');
    };
    manyToOneFilterHelper.prototype.isNotIn = function (values) {
        var _this = this;
        return new Filter(function (add) {
            values.forEach(function (v) { return _this.isDifferentFrom(v).__applyToConsumer(add); });
        });
    };
    manyToOneFilterHelper.prototype.isDifferentFrom = function (val) {
        var _this = this;
        return new Filter(function (add) {
            var or = [];
            var _loop_2 = function (key) {
                if (Object.prototype.hasOwnProperty.call(_this.relationOptions.fields, key)) {
                    var keyInMyEntity_1 = _this.relationOptions.fields[key];
                    or.push(new Filter(function (add) {
                        return new filterHelper(_this.fields.find(keyInMyEntity_1))
                            .isDifferentFrom(val[key])
                            .__applyToConsumer(add);
                    }));
                }
            };
            for (var key in _this.relationOptions.fields) {
                _loop_2(key);
            }
            add.or(or);
        });
    };
    manyToOneFilterHelper.prototype.isLessOrEqualTo = function (val) {
        throw new Error('Invalid for Many To One Relation Field');
    };
    manyToOneFilterHelper.prototype.isGreaterThan = function (val) {
        throw new Error('Invalid for Many To One Relation Field');
    };
    manyToOneFilterHelper.prototype.isEqualTo = function (val) {
        var _this = this;
        return new Filter(function (add) {
            for (var key in _this.relationOptions.fields) {
                if (Object.prototype.hasOwnProperty.call(_this.relationOptions.fields, key)) {
                    var keyInMyEntity = _this.relationOptions.fields[key];
                    new filterHelper(_this.fields.find(keyInMyEntity))
                        .isEqualTo(val[key])
                        .__applyToConsumer(add);
                }
            }
        });
    };
    manyToOneFilterHelper.prototype.isIn = function (val) {
        var _this = this;
        return new Filter(function (add) {
            add.or(val.map(function (v) { return _this.isEqualTo(v); }));
        });
    };
    return manyToOneFilterHelper;
}());
var AndFilter = /** @class */ (function (_super) {
    tslib_1.__extends(AndFilter, _super);
    function AndFilter() {
        var filters = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            filters[_i] = arguments[_i];
        }
        var _this = _super.call(this, function (add) {
            var e_4, _a;
            try {
                for (var _b = tslib_1.__values(_this.filters), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var iterator = _c.value;
                    if (iterator)
                        iterator.__applyToConsumer(add);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }) || this;
        _this.filters = filters;
        return _this;
    }
    AndFilter.prototype.add = function (filter) {
        this.filters.push(filter);
    };
    return AndFilter;
}(Filter));
exports.AndFilter = AndFilter;
var OrFilter = /** @class */ (function (_super) {
    tslib_1.__extends(OrFilter, _super);
    function OrFilter() {
        var filters = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            filters[_i] = arguments[_i];
        }
        var _this = _super.call(this, function (add) {
            var f = _this.filters.filter(function (x) { return x !== undefined; });
            if (f.length > 1) {
                add.or(f);
            }
            else if (f.length == 1)
                f[0].__applyToConsumer(add);
        }) || this;
        _this.filters = filters;
        return _this;
    }
    return OrFilter;
}(Filter));
exports.OrFilter = OrFilter;
var NotFilter = /** @class */ (function (_super) {
    tslib_1.__extends(NotFilter, _super);
    function NotFilter(filter) {
        var _this = _super.call(this, function (add) {
            add.not(filter);
        }) || this;
        _this.filter = filter;
        return _this;
    }
    return NotFilter;
}(Filter));
exports.NotFilter = NotFilter;
exports.customUrlToken = '$custom$';
exports.customDatabaseFilterToken = '$db$';
var customArrayToken = '$an array';
var FilterSerializer = /** @class */ (function () {
    function FilterSerializer() {
        this.result = {};
        this.hasUndefined = false;
    }
    FilterSerializer.prototype.databaseCustom = function (databaseCustom) {
        throw new Error('database custom is not allowed with api calls.');
    };
    FilterSerializer.prototype.custom = function (key, customItem) {
        var _a;
        if (Array.isArray(customItem))
            customItem = (_a = {}, _a[customArrayToken] = customItem, _a);
        this.add(exports.customUrlToken + key, customItem);
    };
    FilterSerializer.prototype.add = function (key, val) {
        if (val === undefined)
            this.hasUndefined = true;
        var r = this.result;
        if (!r[key]) {
            r[key] = val;
            return;
        }
        var v = r[key];
        if (v instanceof Array) {
            v.push(val);
        }
        else
            v = [v, val];
        r[key] = v;
    };
    FilterSerializer.prototype.or = function (orElements) {
        this.add('OR', orElements.map(function (x) {
            var f = new FilterSerializer();
            x.__applyToConsumer(f);
            return f.result;
        }));
    };
    FilterSerializer.prototype.not = function (filter) {
        var f = new FilterSerializer();
        filter.__applyToConsumer(f);
        this.add('NOT', f.result);
    };
    FilterSerializer.prototype.isNull = function (col) {
        this.add(col.key + '.null', true);
    };
    FilterSerializer.prototype.isNotNull = function (col) {
        this.add(col.key + '.null', false);
    };
    FilterSerializer.prototype.isIn = function (col, val) {
        this.add(col.key + '.in', val.map(function (x) { return col.valueConverter.toJson(x); }));
    };
    FilterSerializer.prototype.isEqualTo = function (col, val) {
        this.add(col.key, col.valueConverter.toJson(val));
    };
    FilterSerializer.prototype.isDifferentFrom = function (col, val) {
        this.add(col.key + '.ne', col.valueConverter.toJson(val));
    };
    FilterSerializer.prototype.isGreaterOrEqualTo = function (col, val) {
        this.add(col.key + '.gte', col.valueConverter.toJson(val));
    };
    FilterSerializer.prototype.isGreaterThan = function (col, val) {
        this.add(col.key + '.gt', col.valueConverter.toJson(val));
    };
    FilterSerializer.prototype.isLessOrEqualTo = function (col, val) {
        this.add(col.key + '.lte', col.valueConverter.toJson(val));
    };
    FilterSerializer.prototype.isLessThan = function (col, val) {
        this.add(col.key + '.lt', col.valueConverter.toJson(val));
    };
    FilterSerializer.prototype.containsCaseInsensitive = function (col, val) {
        this.add(col.key + '.contains', val);
    };
    FilterSerializer.prototype.notContainsCaseInsensitive = function (col, val) {
        this.add(col.key + '.notContains', val);
    };
    FilterSerializer.prototype.startsWithCaseInsensitive = function (col, val) {
        this.add(col.key + '.startsWith', val);
    };
    FilterSerializer.prototype.endsWithCaseInsensitive = function (col, val) {
        this.add(col.key + '.endsWith', val);
    };
    return FilterSerializer;
}());
exports.FilterSerializer = FilterSerializer;
function entityFilterToJson(entityDefs, where) {
    if (!where)
        return {};
    return Filter.fromEntityFilter(entityDefs, where).toJson();
}
exports.entityFilterToJson = entityFilterToJson;
function buildFilterFromRequestParameters(entity, filterInfo) {
    var e_5, _a;
    var where = {};
    function addAnd(what) {
        if (!where.$and) {
            where.$and = [];
        }
        where.$and.push(what);
    }
    function addToFilterObject(key, val) {
        var _a;
        if (where[key] === undefined)
            where[key] = val;
        else {
            addAnd((_a = {}, _a[key] = val, _a));
        }
    }
    ;
    tslib_1.__spreadArray([], tslib_1.__read(entity.fields), false).forEach(function (col) {
        function addFilter(operation, theFilter, jsonArray, asString) {
            var e_6, _a;
            if (jsonArray === void 0) { jsonArray = false; }
            if (asString === void 0) { asString = false; }
            var val = filterInfo.get(col.key + operation);
            if (val !== undefined) {
                var addFilter_1 = function (val) {
                    var theVal = val;
                    if (jsonArray) {
                        var arr = void 0;
                        if (typeof val === 'string')
                            arr = JSON.parse(val);
                        else
                            arr = val;
                        theVal = arr.map(function (x) {
                            return asString ? x : col.valueConverter.fromJson(x);
                        });
                    }
                    else {
                        theVal = asString ? theVal : col.valueConverter.fromJson(theVal);
                    }
                    var f = theFilter(theVal);
                    if (f !== undefined) {
                        addToFilterObject(col.key, f);
                    }
                };
                if (!jsonArray && val instanceof Array) {
                    val.forEach(function (v) {
                        addFilter_1(v);
                    });
                }
                else {
                    if (jsonArray) {
                        if (typeof val === 'string')
                            val = JSON.parse(val);
                    }
                    var array = separateArrayFromInnerArray(val);
                    try {
                        for (var array_2 = tslib_1.__values(array), array_2_1 = array_2.next(); !array_2_1.done; array_2_1 = array_2.next()) {
                            var x = array_2_1.value;
                            addFilter_1(x);
                        }
                    }
                    catch (e_6_1) { e_6 = { error: e_6_1 }; }
                    finally {
                        try {
                            if (array_2_1 && !array_2_1.done && (_a = array_2.return)) _a.call(array_2);
                        }
                        finally { if (e_6) throw e_6.error; }
                    }
                }
            }
        }
        addFilter('', function (val) { return val; });
        addFilter('.gt', function (val) { return ({ $gt: val }); });
        addFilter('.gte', function (val) { return ({ $gte: val }); });
        addFilter('.lt', function (val) { return ({ $lt: val }); });
        addFilter('.lte', function (val) { return ({ $lte: val }); });
        addFilter('.ne', function (val) { return ({ $ne: val }); });
        addFilter('.in', function (val) { return val; }, true);
        var nullFilter = filterInfo.get(col.key + '.null');
        if (nullFilter) {
            nullFilter = nullFilter.toString().trim().toLowerCase();
            switch (nullFilter) {
                case 'y':
                case 'true':
                case 'yes':
                    addToFilterObject(col.key, null);
                    break;
                default:
                    addToFilterObject(col.key, { $ne: null });
                    break;
            }
        }
        addFilter('.contains', function (val) { return ({ $contains: val }); }, false, true);
        addFilter('.notContains', function (val) { return ({ $notContains: val }); }, false, true);
        addFilter('.startsWith', function (val) { return ({ $startsWith: val }); }, false, true);
        addFilter('.endsWith', function (val) { return ({ $endsWith: val }); }, false, true);
    });
    var val = filterInfo.get('OR');
    if (val) {
        var array = separateArrayFromInnerArray(val);
        var or = array.map(function (v) { return ({
            $or: v.map(function (x) {
                return buildFilterFromRequestParameters(entity, {
                    get: function (key) { return x[key]; },
                });
            }),
        }); });
        if (or.length == 1) {
            if (!where.$or) {
                where.$or = or[0].$or;
            }
            else {
                where.$or.push(or[0].$or);
            }
        }
        else {
            addAnd({
                $and: or,
            });
        }
    }
    val = filterInfo.get('NOT');
    if (val) {
        var array = separateArrayFromInnerArray(val);
        var not = [];
        var _loop_3 = function (e1) {
            var e_7, _b;
            var z = e1;
            if (Array.isArray(e1)) {
                var _loop_5 = function (e2) {
                    not.push({
                        $not: buildFilterFromRequestParameters(entity, {
                            get: function (key) { return e2[key]; },
                        }),
                    });
                };
                try {
                    for (var e1_1 = (e_7 = void 0, tslib_1.__values(e1)), e1_1_1 = e1_1.next(); !e1_1_1.done; e1_1_1 = e1_1.next()) {
                        var e2 = e1_1_1.value;
                        _loop_5(e2);
                    }
                }
                catch (e_7_1) { e_7 = { error: e_7_1 }; }
                finally {
                    try {
                        if (e1_1_1 && !e1_1_1.done && (_b = e1_1.return)) _b.call(e1_1);
                    }
                    finally { if (e_7) throw e_7.error; }
                }
            }
            else
                not.push({
                    $not: buildFilterFromRequestParameters(entity, {
                        get: function (key) { return e1[key]; },
                    }),
                });
        };
        try {
            for (var array_1 = tslib_1.__values(array), array_1_1 = array_1.next(); !array_1_1.done; array_1_1 = array_1.next()) {
                var e1 = array_1_1.value;
                _loop_3(e1);
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (array_1_1 && !array_1_1.done && (_a = array_1.return)) _a.call(array_1);
            }
            finally { if (e_5) throw e_5.error; }
        }
        if (not.length == 1 && !where.$not) {
            where = not[0];
        }
        else {
            addAnd({
                $and: not,
            });
        }
    }
    var _loop_4 = function (key) {
        var element = entity.entityType[key];
        if (element &&
            element.rawFilterInfo &&
            element.rawFilterInfo.rawFilterTranslator) {
            var custom = filterInfo.get(exports.customUrlToken + key);
            if (custom !== undefined) {
                var addItem_1 = function (item) {
                    if (item[customArrayToken] != undefined)
                        item = item[customArrayToken];
                    addToFilterObject(exports.customUrlToken + key, item);
                };
                if (Array.isArray(custom)) {
                    custom.forEach(function (item) { return addItem_1(item); });
                }
                else
                    addItem_1(custom);
            }
        }
    };
    for (var key in entity.entityType) {
        _loop_4(key);
    }
    return where;
    function separateArrayFromInnerArray(val) {
        var e_8, _a;
        if (!Array.isArray(val))
            return [val];
        var nonArray = [], array = [];
        try {
            for (var val_1 = tslib_1.__values(val), val_1_1 = val_1.next(); !val_1_1.done; val_1_1 = val_1.next()) {
                var v = val_1_1.value;
                if (Array.isArray(v)) {
                    array.push(v);
                }
                else
                    nonArray.push(v);
            }
        }
        catch (e_8_1) { e_8 = { error: e_8_1 }; }
        finally {
            try {
                if (val_1_1 && !val_1_1.done && (_a = val_1.return)) _a.call(val_1);
            }
            finally { if (e_8) throw e_8.error; }
        }
        array.push(nonArray);
        return array;
    }
}
exports.buildFilterFromRequestParameters = buildFilterFromRequestParameters;
var customTranslator = /** @class */ (function () {
    function customTranslator(translateCustom) {
        this.translateCustom = translateCustom;
        this.commands = [];
        this.promises = [];
    }
    customTranslator.prototype.applyTo = function (x) {
        this.commands.forEach(function (y) { return y(x); });
    };
    customTranslator.prototype.or = function (orElements) {
        var _this = this;
        var newOrElements;
        this.promises.push(Promise.all(orElements.map(function (element) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var c;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        c = new customTranslator(this.translateCustom);
                        element.__applyToConsumer(c);
                        return [4 /*yield*/, c.resolve()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, new Filter(function (x) { return c.applyTo(x); })];
                }
            });
        }); })).then(function (x) {
            newOrElements = x;
        }));
        this.commands.push(function (x) { return x.or(newOrElements); });
    };
    customTranslator.prototype.not = function (filter) {
        var _this = this;
        var newNotElement;
        this.promises.push((function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var c;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        c = new customTranslator(this.translateCustom);
                        filter.__applyToConsumer(c);
                        return [4 /*yield*/, c.resolve()];
                    case 1:
                        _a.sent();
                        newNotElement = new Filter(function (x) { return c.applyTo(x); });
                        return [2 /*return*/];
                }
            });
        }); })());
        this.commands.push(function (x) { return x.not(newNotElement); });
    };
    customTranslator.prototype.isEqualTo = function (col, val) {
        this.commands.push(function (x) { return x.isEqualTo(col, val); });
    };
    customTranslator.prototype.isDifferentFrom = function (col, val) {
        this.commands.push(function (x) { return x.isDifferentFrom(col, val); });
    };
    customTranslator.prototype.isNull = function (col) {
        this.commands.push(function (x) { return x.isNull(col); });
    };
    customTranslator.prototype.isNotNull = function (col) {
        this.commands.push(function (x) { return x.isNotNull(col); });
    };
    customTranslator.prototype.isGreaterOrEqualTo = function (col, val) {
        this.commands.push(function (x) { return x.isGreaterOrEqualTo(col, val); });
    };
    customTranslator.prototype.isGreaterThan = function (col, val) {
        this.commands.push(function (x) { return x.isGreaterThan(col, val); });
    };
    customTranslator.prototype.isLessOrEqualTo = function (col, val) {
        this.commands.push(function (x) { return x.isLessOrEqualTo(col, val); });
    };
    customTranslator.prototype.isLessThan = function (col, val) {
        this.commands.push(function (x) { return x.isLessThan(col, val); });
    };
    customTranslator.prototype.containsCaseInsensitive = function (col, val) {
        this.commands.push(function (x) { return x.containsCaseInsensitive(col, val); });
    };
    customTranslator.prototype.notContainsCaseInsensitive = function (col, val) {
        this.commands.push(function (x) { return x.notContainsCaseInsensitive(col, val); });
    };
    customTranslator.prototype.startsWithCaseInsensitive = function (col, val) {
        this.commands.push(function (x) { return x.startsWithCaseInsensitive(col, val); });
    };
    customTranslator.prototype.endsWithCaseInsensitive = function (col, val) {
        this.commands.push(function (x) { return x.endsWithCaseInsensitive(col, val); });
    };
    customTranslator.prototype.isIn = function (col, val) {
        this.commands.push(function (x) { return x.isIn(col, val); });
    };
    customTranslator.prototype.custom = function (key, customItem) {
        var _this = this;
        this.promises.push((function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var r;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.translateCustom(key, customItem)];
                    case 1:
                        r = _a.sent();
                        if (r)
                            if (Array.isArray(r))
                                r.forEach(function (x) { return x.__applyToConsumer(_this); });
                            else
                                r.__applyToConsumer(this);
                        return [2 /*return*/];
                }
            });
        }); })());
    };
    customTranslator.prototype.databaseCustom = function (custom) {
        this.commands.push(function (x) { return x.databaseCustom(custom); });
    };
    customTranslator.prototype.resolve = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var p;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.promises.length > 0)) return [3 /*break*/, 2];
                        p = this.promises;
                        this.promises = [];
                        return [4 /*yield*/, Promise.all(p)];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 0];
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    return customTranslator;
}());
function __updateEntityBasedOnWhere(entityDefs, where, r) {
    var w = Filter.fromEntityFilter(entityDefs, where);
    var emptyFunction = function () { };
    if (w) {
        w.__applyToConsumer({
            custom: emptyFunction,
            databaseCustom: emptyFunction,
            containsCaseInsensitive: emptyFunction,
            notContainsCaseInsensitive: emptyFunction,
            startsWithCaseInsensitive: emptyFunction,
            endsWithCaseInsensitive: emptyFunction,
            isDifferentFrom: emptyFunction,
            isEqualTo: function (col, val) {
                r[col.key] = val;
            },
            isGreaterOrEqualTo: emptyFunction,
            isGreaterThan: emptyFunction,
            isIn: emptyFunction,
            isLessOrEqualTo: emptyFunction,
            isLessThan: emptyFunction,
            isNotNull: emptyFunction,
            isNull: emptyFunction,
            not: emptyFunction,
            or: emptyFunction,
        });
    }
}
exports.__updateEntityBasedOnWhere = __updateEntityBasedOnWhere;
var preciseValuesCollector = /** @class */ (function () {
    function preciseValuesCollector() {
        this.rawValues = {};
        this.preciseValues = new Proxy(this.rawValues, {
            get: function (target, prop) {
                if (prop in target) {
                    var result = target[prop];
                    if (result.bad)
                        return undefined;
                    if (result.values.length > 0) {
                        var relInfo_1 = (0, relationInfoMember_js_1.getRelationFieldInfo)(result.field);
                        if (relInfo_1) {
                            if (relInfo_1.type === 'reference') {
                                return result.values.map(function (x) {
                                    return relInfo_1.toRepo.metadata.idMetadata.getIdFilter(x);
                                });
                            }
                            else
                                throw new Error('Only relations toOne without field are supported.');
                        }
                        return result.values;
                    }
                }
                return undefined;
            },
        });
    }
    preciseValuesCollector.prototype.ok = function (col) {
        var _a;
        var val = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            val[_i - 1] = arguments[_i];
        }
        var x = this.rawValues[col.key];
        if (!x) {
            this.rawValues[col.key] = {
                field: col,
                bad: false,
                values: tslib_1.__spreadArray([], tslib_1.__read(val), false),
            };
        }
        else {
            (_a = x.values).push.apply(_a, tslib_1.__spreadArray([], tslib_1.__read(val.filter(function (y) { return !x.values.includes(y); })), false));
        }
    };
    preciseValuesCollector.prototype.notOk = function (col) {
        var x = this.rawValues[col.key];
        if (!x) {
            this.rawValues[col.key] = {
                field: col,
                bad: true,
                values: [],
            };
        }
        else {
            x.bad = true;
        }
    };
    preciseValuesCollector.prototype.not = function (filter) { };
    preciseValuesCollector.prototype.or = function (orElements) {
        var e_9, _a, e_10, _b;
        var result = orElements.map(function (or) {
            var x = new preciseValuesCollector();
            or.__applyToConsumer(x);
            return x;
        });
        try {
            for (var result_1 = tslib_1.__values(result), result_1_1 = result_1.next(); !result_1_1.done; result_1_1 = result_1.next()) {
                var or = result_1_1.value;
                for (var key in or.rawValues) {
                    if (Object.prototype.hasOwnProperty.call(or.rawValues, key)) {
                        var element = or.rawValues[key];
                        if (element) {
                            if (element.bad)
                                this.notOk(element.field);
                            else {
                                this.ok.apply(this, tslib_1.__spreadArray([element.field], tslib_1.__read(element.values), false));
                            }
                        }
                    }
                }
            }
        }
        catch (e_9_1) { e_9 = { error: e_9_1 }; }
        finally {
            try {
                if (result_1_1 && !result_1_1.done && (_a = result_1.return)) _a.call(result_1);
            }
            finally { if (e_9) throw e_9.error; }
        }
        for (var key in this.rawValues) {
            if (Object.prototype.hasOwnProperty.call(this.rawValues, key)) {
                try {
                    for (var result_2 = (e_10 = void 0, tslib_1.__values(result)), result_2_1 = result_2.next(); !result_2_1.done; result_2_1 = result_2.next()) {
                        var r = result_2_1.value;
                        var element = r.rawValues[key];
                        if (!element)
                            this.notOk(this.rawValues[key].field);
                    }
                }
                catch (e_10_1) { e_10 = { error: e_10_1 }; }
                finally {
                    try {
                        if (result_2_1 && !result_2_1.done && (_b = result_2.return)) _b.call(result_2);
                    }
                    finally { if (e_10) throw e_10.error; }
                }
            }
        }
    };
    preciseValuesCollector.prototype.isEqualTo = function (col, val) {
        this.ok(col, val);
    };
    preciseValuesCollector.prototype.isDifferentFrom = function (col, val) {
        this.notOk(col);
    };
    preciseValuesCollector.prototype.isNull = function (col) {
        this.ok(col, null);
    };
    preciseValuesCollector.prototype.isNotNull = function (col) {
        this.notOk(col);
    };
    preciseValuesCollector.prototype.isGreaterOrEqualTo = function (col, val) {
        this.notOk(col);
    };
    preciseValuesCollector.prototype.isGreaterThan = function (col, val) {
        this.notOk(col);
    };
    preciseValuesCollector.prototype.isLessOrEqualTo = function (col, val) {
        this.notOk(col);
    };
    preciseValuesCollector.prototype.isLessThan = function (col, val) {
        this.notOk(col);
    };
    preciseValuesCollector.prototype.containsCaseInsensitive = function (col, val) {
        this.notOk(col);
    };
    preciseValuesCollector.prototype.notContainsCaseInsensitive = function (col, val) {
        this.notOk(col);
    };
    preciseValuesCollector.prototype.startsWithCaseInsensitive = function (col, val) {
        this.notOk(col);
    };
    preciseValuesCollector.prototype.endsWithCaseInsensitive = function (col, val) {
        this.notOk(col);
    };
    preciseValuesCollector.prototype.isIn = function (col, val) {
        this.ok.apply(this, tslib_1.__spreadArray([col], tslib_1.__read(val), false));
    };
    preciseValuesCollector.prototype.custom = function (key, customItem) { };
    preciseValuesCollector.prototype.databaseCustom = function (databaseCustom) { };
    return preciseValuesCollector;
}());
