"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createKnexDataProvider = exports.buildColumn = exports.KnexSchemaBuilder = exports.KnexDataProvider = void 0;
var tslib_1 = require("tslib");
var filter_consumer_bridge_to_sql_request_js_1 = require("../src/filter/filter-consumer-bridge-to-sql-request.js");
var filter_consumer_bridge_to_sql_request_js_2 = require("../src/filter/filter-consumer-bridge-to-sql-request.js");
var filter_interfaces_js_1 = require("../src/filter/filter-interfaces.js");
var remult_proxy_js_1 = require("../src/remult-proxy.js");
var RepositoryImplementation_js_1 = require("../src/remult3/RepositoryImplementation.js");
var sort_js_1 = require("../src/sort.js");
var valueConverters_js_1 = require("../src/valueConverters.js");
var repository_internals_js_1 = require("../src/remult3/repository-internals.js");
var remult_static_js_1 = require("../src/remult-static.js");
var sql_database_js_1 = require("../src/data-providers/sql-database.js");
var KnexDataProvider = /** @class */ (function () {
    function KnexDataProvider(knex) {
        var _this = this;
        this.knex = knex;
        this.wrapIdentifier = function (x) { return _this.knex.ref(x) + ''; };
    }
    KnexDataProvider.prototype.end = function () {
        return this.knex.destroy();
    };
    KnexDataProvider.prototype.provideMigrationBuilder = function (builder) {
        var sb = new KnexSchemaBuilder(this.knex);
        return {
            createTable: function (entity) {
                return tslib_1.__awaiter(this, void 0, void 0, function () {
                    var e;
                    return tslib_1.__generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, (0, filter_consumer_bridge_to_sql_request_js_2.dbNamesOf)(entity, function (x) { return x; })];
                            case 1:
                                e = _a.sent();
                                sb.createTableKnexCommand(entity, e)
                                    .toSQL()
                                    .forEach(function (sql) { return builder.addSql(sql.sql); });
                                return [2 /*return*/];
                        }
                    });
                });
            },
            addColumn: function (entity, field) {
                return tslib_1.__awaiter(this, void 0, void 0, function () {
                    var e;
                    return tslib_1.__generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, (0, filter_consumer_bridge_to_sql_request_js_2.dbNamesOf)(entity, function (x) { return x; })];
                            case 1:
                                e = _a.sent();
                                return [4 /*yield*/, sb
                                        .createColumnKnexCommand(e, field, e.$dbNameOf(field))
                                        .toSQL()
                                        .forEach(function (sql) { return builder.addSql(sql.sql); })];
                            case 2:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                });
            },
        };
    };
    KnexDataProvider.prototype.createCommand = function () {
        return new KnexBridgeToSQLCommand(this.knex);
    };
    KnexDataProvider.prototype.execute = function (sql) {
        return this.createCommand().execute(sql);
    };
    KnexDataProvider.getDb = function (dataProvider) {
        var r = (dataProvider || remult_proxy_js_1.remult.dataProvider);
        if (!r.knex)
            throw 'the data provider is not an KnexDataProvider';
        return r.knex;
    };
    KnexDataProvider.prototype.getEntityDataProvider = function (entity) {
        var e_1, _a, e_2, _b;
        if (!supportsJsonLoadingAndSaving(this.knex))
            try {
                for (var _c = tslib_1.__values(entity.fields.toArray()), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var f = _d.value;
                    if (f.valueConverter.fieldTypeInDb === 'json') {
                        //@ts-ignore
                        f.valueConverter = tslib_1.__assign(tslib_1.__assign({}, f.valueConverter), { toDb: valueConverters_js_1.ValueConverters.JsonString.toDb, fromDb: valueConverters_js_1.ValueConverters.JsonString.fromDb });
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_1) throw e_1.error; }
            }
        else if (this.knex.client.config.client === 'mysql2') {
            try {
                for (var _e = tslib_1.__values(entity.fields.toArray()), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var f = _f.value;
                    if (f.valueConverter.fieldTypeInDb === 'json') {
                        //@ts-ignore
                        f.valueConverter = tslib_1.__assign(tslib_1.__assign({}, f.valueConverter), { toDb: valueConverters_js_1.ValueConverters.JsonString.toDb });
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        return new KnexEntityDataProvider(entity, this.knex, this.wrapIdentifier);
    };
    KnexDataProvider.prototype.transaction = function (action) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var t, err_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.knex.transaction()];
                    case 1:
                        t = _a.sent();
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 5, , 7]);
                        return [4 /*yield*/, action(new KnexDataProvider(t))];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, t.commit()];
                    case 4:
                        _a.sent();
                        return [3 /*break*/, 7];
                    case 5:
                        err_1 = _a.sent();
                        return [4 /*yield*/, t.rollback()];
                    case 6:
                        _a.sent();
                        throw err_1;
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    KnexDataProvider.rawFilter = function (build) {
        var _a;
        return _a = {},
            _a[filter_interfaces_js_1.customDatabaseFilterToken] = {
                buildKnex: build,
            },
            _a;
    };
    KnexDataProvider.filterToRaw = function (entity, condition, wrapIdentifier) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var repo, b, _a, r;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        repo = (0, RepositoryImplementation_js_1.getRepository)(entity);
                        _a = FilterConsumerBridgeToKnexRequest.bind;
                        return [4 /*yield*/, (0, filter_consumer_bridge_to_sql_request_js_1.dbNamesOfWithForceSqlExpression)(repo.metadata, function (x) { return x; })];
                    case 1:
                        b = new (_a.apply(FilterConsumerBridgeToKnexRequest, [void 0, _b.sent(), wrapIdentifier]))();
                        b._addWhere = false;
                        return [4 /*yield*/, (0, repository_internals_js_1.getRepositoryInternals)(repo)._translateWhereToFilter(condition)];
                    case 2: return [4 /*yield*/, (_b.sent()).__applyToConsumer(b)];
                    case 3:
                        _b.sent();
                        return [4 /*yield*/, b.resolveWhere()];
                    case 4:
                        r = _b.sent();
                        return [2 /*return*/, function (knex) { return r.forEach(function (y) { return y(knex); }); }];
                }
            });
        });
    };
    KnexDataProvider.prototype.ensureSchema = function (entities) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var sb;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        sb = new KnexSchemaBuilder(this.knex);
                        return [4 /*yield*/, sb.ensureSchema(entities)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return KnexDataProvider;
}());
exports.KnexDataProvider = KnexDataProvider;
var KnexEntityDataProvider = /** @class */ (function () {
    function KnexEntityDataProvider(entity, knex, rawSqlWrapIdentifier) {
        this.entity = entity;
        this.knex = knex;
        this.rawSqlWrapIdentifier = rawSqlWrapIdentifier;
    }
    KnexEntityDataProvider.prototype.count = function (where) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var e, br, r, result, row, key, element;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.init()];
                    case 1:
                        e = _a.sent();
                        br = new FilterConsumerBridgeToKnexRequest(e, this.rawSqlWrapIdentifier);
                        where.__applyToConsumer(br);
                        return [4 /*yield*/, br.resolveWhere()];
                    case 2:
                        r = _a.sent();
                        return [4 /*yield*/, this.knex(e.$entityName)
                                .count()
                                .where(function (b) { return r.forEach(function (w) { return w(b); }); })];
                    case 3:
                        result = _a.sent();
                        row = result[0];
                        for (key in row) {
                            if (Object.prototype.hasOwnProperty.call(row, key)) {
                                element = row[key];
                                return [2 /*return*/, +element];
                            }
                        }
                        throw Error("couldn't find count member");
                }
            });
        });
    };
    KnexEntityDataProvider.prototype.find = function (options) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var e, cols, colKeys, _a, _b, x, name_1, query, br, r_1, r;
            var e_3, _c;
            return tslib_1.__generator(this, function (_d) {
                switch (_d.label) {
                    case 0: return [4 /*yield*/, this.init()];
                    case 1:
                        e = _d.sent();
                        cols = [];
                        colKeys = [];
                        try {
                            for (_a = tslib_1.__values(this.entity.fields), _b = _a.next(); !_b.done; _b = _a.next()) {
                                x = _b.value;
                                if (x.isServerExpression) {
                                }
                                else {
                                    name_1 = e.$dbNameOf(x);
                                    if (x.options.sqlExpression)
                                        name_1 = this.knex.raw('?? as ' + x.key, [name_1]);
                                    cols.push(name_1);
                                    colKeys.push(x);
                                }
                            }
                        }
                        catch (e_3_1) { e_3 = { error: e_3_1 }; }
                        finally {
                            try {
                                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                            }
                            finally { if (e_3) throw e_3.error; }
                        }
                        query = this.knex(e.$entityName).select(cols);
                        if (!(options === null || options === void 0 ? void 0 : options.where)) return [3 /*break*/, 3];
                        br = new FilterConsumerBridgeToKnexRequest(e, this.rawSqlWrapIdentifier);
                        options.where.__applyToConsumer(br);
                        return [4 /*yield*/, br.resolveWhere()];
                    case 2:
                        r_1 = _d.sent();
                        query.where(function (b) { return r_1.forEach(function (y) { return y(b); }); });
                        _d.label = 3;
                    case 3:
                        if (!options.orderBy) {
                            options.orderBy = sort_js_1.Sort.createUniqueSort(this.entity, new sort_js_1.Sort());
                        }
                        if (options.orderBy) {
                            query = query.orderBy(options.orderBy.Segments.map(function (s) { return ({
                                column: e.$dbNameOf(s.field),
                                order: s.isDescending ? 'desc' : 'asc',
                            }); }));
                        }
                        if (options.limit) {
                            query = query.limit(options.limit);
                            if (options.page)
                                query = query.offset((options.page - 1) * options.limit);
                        }
                        return [4 /*yield*/, query];
                    case 4:
                        r = _d.sent();
                        return [2 /*return*/, r.map(function (y) {
                                var result = {};
                                var i = 0;
                                for (var m in y) {
                                    var field = colKeys[i++];
                                    try {
                                        result[field.key] = field.valueConverter.fromDb(y[m]);
                                    }
                                    catch (err) {
                                        throw new Error('Failed to load from db:' + field.key + '\r\n' + err);
                                    }
                                }
                                return result;
                            })];
                }
            });
        });
    };
    KnexEntityDataProvider.prototype.init = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var r;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, filter_consumer_bridge_to_sql_request_js_1.dbNamesOfWithForceSqlExpression)(this.entity, function (x) { return x; })];
                    case 1:
                        r = (_a.sent());
                        return [2 /*return*/, {
                                $dbNameOf: function (f) {
                                    var fm = f;
                                    if (fm.options.sqlExpression)
                                        return _this.knex.raw(r.$dbNameOf(f));
                                    return r.$dbNameOf(f);
                                },
                                $entityName: r.$entityName,
                                wrapIdentifier: r.wrapIdentifier,
                            }];
                }
            });
        });
    };
    KnexEntityDataProvider.prototype.update = function (id, data) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var e, f, updateObject, _a, _b, x, v, key, e_4_1, where;
            var e_4, _c;
            return tslib_1.__generator(this, function (_d) {
                switch (_d.label) {
                    case 0: return [4 /*yield*/, this.init()];
                    case 1:
                        e = _d.sent();
                        f = new FilterConsumerBridgeToKnexRequest(e, this.rawSqlWrapIdentifier);
                        filter_interfaces_js_1.Filter.fromEntityFilter(this.entity, this.entity.idMetadata.getIdFilter(id)).__applyToConsumer(f);
                        updateObject = {};
                        _d.label = 2;
                    case 2:
                        _d.trys.push([2, 8, 9, 10]);
                        _a = tslib_1.__values(this.entity.fields), _b = _a.next();
                        _d.label = 3;
                    case 3:
                        if (!!_b.done) return [3 /*break*/, 7];
                        x = _b.value;
                        if (!(0, filter_consumer_bridge_to_sql_request_js_2.isDbReadonly)(x, e)) return [3 /*break*/, 4];
                        return [3 /*break*/, 6];
                    case 4:
                        if (!(data[x.key] !== undefined)) return [3 /*break*/, 6];
                        v = translateValueAndHandleArrayAndHandleArray(x, data[x.key]);
                        if (!(v !== undefined)) return [3 /*break*/, 6];
                        return [4 /*yield*/, e.$dbNameOf(x)];
                    case 5:
                        key = _d.sent();
                        updateObject[key] = v;
                        _d.label = 6;
                    case 6:
                        _b = _a.next();
                        return [3 /*break*/, 3];
                    case 7: return [3 /*break*/, 10];
                    case 8:
                        e_4_1 = _d.sent();
                        e_4 = { error: e_4_1 };
                        return [3 /*break*/, 10];
                    case 9:
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        }
                        finally { if (e_4) throw e_4.error; }
                        return [7 /*endfinally*/];
                    case 10: return [4 /*yield*/, f.resolveWhere()];
                    case 11:
                        where = _d.sent();
                        return [4 /*yield*/, this.knex(e.$entityName)
                                .update(updateObject)
                                .where(function (b) { return where.forEach(function (w) { return w(b); }); })];
                    case 12:
                        _d.sent();
                        return [2 /*return*/, (0, sql_database_js_1.getRowAfterUpdate)(this.entity, this, data, id, 'update')];
                }
            });
        });
    };
    KnexEntityDataProvider.prototype.delete = function (id) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var e, f, where;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.init()];
                    case 1:
                        e = _a.sent();
                        f = new FilterConsumerBridgeToKnexRequest(e, this.rawSqlWrapIdentifier);
                        filter_interfaces_js_1.Filter.fromEntityFilter(this.entity, this.entity.idMetadata.getIdFilter(id)).__applyToConsumer(f);
                        return [4 /*yield*/, f.resolveWhere()];
                    case 2:
                        where = _a.sent();
                        return [4 /*yield*/, this.knex(e.$entityName)
                                .delete()
                                .where(function (b) { return where.forEach(function (w) { return w(b); }); })];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    KnexEntityDataProvider.prototype.insert = function (data) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var e, insertObject, _a, _b, x, v, key, e_5_1, insert, newId_1, result, result;
            var e_5, _c;
            var _this = this;
            return tslib_1.__generator(this, function (_d) {
                switch (_d.label) {
                    case 0: return [4 /*yield*/, this.init()];
                    case 1:
                        e = _d.sent();
                        insertObject = {};
                        _d.label = 2;
                    case 2:
                        _d.trys.push([2, 8, 9, 10]);
                        _a = tslib_1.__values(this.entity.fields), _b = _a.next();
                        _d.label = 3;
                    case 3:
                        if (!!_b.done) return [3 /*break*/, 7];
                        x = _b.value;
                        if (!(0, filter_consumer_bridge_to_sql_request_js_2.isDbReadonly)(x, e)) return [3 /*break*/, 4];
                        return [3 /*break*/, 6];
                    case 4:
                        v = translateValueAndHandleArrayAndHandleArray(x, data[x.key]);
                        if (!(v != undefined)) return [3 /*break*/, 6];
                        return [4 /*yield*/, e.$dbNameOf(x)];
                    case 5:
                        key = _d.sent();
                        insertObject[key] = v;
                        _d.label = 6;
                    case 6:
                        _b = _a.next();
                        return [3 /*break*/, 3];
                    case 7: return [3 /*break*/, 10];
                    case 8:
                        e_5_1 = _d.sent();
                        e_5 = { error: e_5_1 };
                        return [3 /*break*/, 10];
                    case 9:
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        }
                        finally { if (e_5) throw e_5.error; }
                        return [7 /*endfinally*/];
                    case 10:
                        insert = this.knex(e.$entityName).insert(insertObject);
                        if (!(0, RepositoryImplementation_js_1.isAutoIncrement)(this.entity.idMetadata.field)) return [3 /*break*/, 15];
                        if (!(this.knex.client.config.client === 'mysql2' ||
                            this.knex.client.config.client === 'mysql')) return [3 /*break*/, 12];
                        return [4 /*yield*/, insert];
                    case 11:
                        result = _d.sent();
                        newId_1 = result[0];
                        return [3 /*break*/, 14];
                    case 12: return [4 /*yield*/, insert.returning(this.entity.idMetadata.field.key)];
                    case 13:
                        result = _d.sent();
                        newId_1 = result[0].id;
                        _d.label = 14;
                    case 14: return [2 /*return*/, this.find({
                            where: new filter_interfaces_js_1.Filter(function (x) {
                                return x.isEqualTo(_this.entity.idMetadata.field, newId_1);
                            }),
                        }).then(function (y) { return y[0]; })];
                    case 15: return [4 /*yield*/, insert];
                    case 16:
                        _d.sent();
                        _d.label = 17;
                    case 17: return [2 /*return*/, (0, sql_database_js_1.getRowAfterUpdate)(this.entity, this, data, undefined, 'insert')];
                }
            });
        });
    };
    return KnexEntityDataProvider;
}());
var FilterConsumerBridgeToKnexRequest = /** @class */ (function () {
    function FilterConsumerBridgeToKnexRequest(innerNameProvider, rawSqlWrapIdentifier) {
        this.innerNameProvider = innerNameProvider;
        this.rawSqlWrapIdentifier = rawSqlWrapIdentifier;
        this._addWhere = true;
        this.promises = [];
        this.result = [];
    }
    FilterConsumerBridgeToKnexRequest.prototype.resolveWhere = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var p, p_1, p_1_1, pr, e_6_1;
            var e_6, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(this.promises.length > 0)) return [3 /*break*/, 9];
                        p = this.promises;
                        this.promises = [];
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 6, 7, 8]);
                        p_1 = (e_6 = void 0, tslib_1.__values(p)), p_1_1 = p_1.next();
                        _b.label = 2;
                    case 2:
                        if (!!p_1_1.done) return [3 /*break*/, 5];
                        pr = p_1_1.value;
                        return [4 /*yield*/, pr];
                    case 3:
                        _b.sent();
                        _b.label = 4;
                    case 4:
                        p_1_1 = p_1.next();
                        return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        e_6_1 = _b.sent();
                        e_6 = { error: e_6_1 };
                        return [3 /*break*/, 8];
                    case 7:
                        try {
                            if (p_1_1 && !p_1_1.done && (_a = p_1.return)) _a.call(p_1);
                        }
                        finally { if (e_6) throw e_6.error; }
                        return [7 /*endfinally*/];
                    case 8: return [3 /*break*/, 0];
                    case 9: return [2 /*return*/, this.result];
                }
            });
        });
    };
    FilterConsumerBridgeToKnexRequest.prototype.custom = function (key, customItem) {
        throw new Error('Custom filter should be translated before it gets here');
    };
    FilterConsumerBridgeToKnexRequest.prototype.or = function (orElements) {
        var _this = this;
        this.promises.push((function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var result, _loop_1, this_1, orElements_1, orElements_1_1, element, state_1, e_7_1;
            var e_7, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        result = [];
                        _loop_1 = function (element) {
                            var f, where;
                            return tslib_1.__generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        f = new FilterConsumerBridgeToKnexRequest(this_1.innerNameProvider, this_1.rawSqlWrapIdentifier);
                                        f._addWhere = false;
                                        element.__applyToConsumer(f);
                                        return [4 /*yield*/, f.resolveWhere()];
                                    case 1:
                                        where = _c.sent();
                                        if (where.length > 0) {
                                            result.push(function (b) {
                                                b.orWhere(function (b) {
                                                    where.forEach(function (x) { return x(b); });
                                                });
                                            });
                                        }
                                        else
                                            return [2 /*return*/, { value: void 0 }]; //empty or means all rows
                                        return [2 /*return*/];
                                }
                            });
                        };
                        this_1 = this;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 6, 7, 8]);
                        orElements_1 = tslib_1.__values(orElements), orElements_1_1 = orElements_1.next();
                        _b.label = 2;
                    case 2:
                        if (!!orElements_1_1.done) return [3 /*break*/, 5];
                        element = orElements_1_1.value;
                        return [5 /*yield**/, _loop_1(element)];
                    case 3:
                        state_1 = _b.sent();
                        if (typeof state_1 === "object")
                            return [2 /*return*/, state_1.value];
                        _b.label = 4;
                    case 4:
                        orElements_1_1 = orElements_1.next();
                        return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        e_7_1 = _b.sent();
                        e_7 = { error: e_7_1 };
                        return [3 /*break*/, 8];
                    case 7:
                        try {
                            if (orElements_1_1 && !orElements_1_1.done && (_a = orElements_1.return)) _a.call(orElements_1);
                        }
                        finally { if (e_7) throw e_7.error; }
                        return [7 /*endfinally*/];
                    case 8:
                        if (result.length > 0) {
                            this.result.push(function (b) { return b.where(function (x) { return result.find(function (y) { return y(x); }); }); });
                        }
                        return [2 /*return*/];
                }
            });
        }); })());
    };
    FilterConsumerBridgeToKnexRequest.prototype.not = function (element) {
        var _this = this;
        this.promises.push((function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var f, where;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        f = new FilterConsumerBridgeToKnexRequest(this.innerNameProvider, this.rawSqlWrapIdentifier);
                        f._addWhere = false;
                        element.__applyToConsumer(f);
                        return [4 /*yield*/, f.resolveWhere()];
                    case 1:
                        where = _a.sent();
                        if (where.length > 0) {
                            this.result.push(function (b) {
                                b.whereNot(function (b) {
                                    where.forEach(function (x) { return x(b); });
                                });
                            });
                        }
                        else
                            return [2 /*return*/]; //empty or means all rows
                        return [2 /*return*/];
                }
            });
        }); })());
    };
    FilterConsumerBridgeToKnexRequest.prototype.isNull = function (col) {
        var _this = this;
        this.result.push(function (b) { return b.whereNull(_this.innerNameProvider.$dbNameOf(col)); });
    };
    FilterConsumerBridgeToKnexRequest.prototype.isNotNull = function (col) {
        var _this = this;
        this.result.push(function (b) {
            return b.whereNotNull(_this.innerNameProvider.$dbNameOf(col));
        });
    };
    FilterConsumerBridgeToKnexRequest.prototype.isIn = function (col, val) {
        var _this = this;
        this.result.push(function (knex) {
            return knex.whereIn(_this.innerNameProvider.$dbNameOf(col), val.map(function (x) { return translateValueAndHandleArrayAndHandleArray(col, x); }));
        });
    };
    FilterConsumerBridgeToKnexRequest.prototype.isEqualTo = function (col, val) {
        this.add(col, val, '=');
    };
    FilterConsumerBridgeToKnexRequest.prototype.isDifferentFrom = function (col, val) {
        this.add(col, val, '<>');
    };
    FilterConsumerBridgeToKnexRequest.prototype.isGreaterOrEqualTo = function (col, val) {
        this.add(col, val, '>=');
    };
    FilterConsumerBridgeToKnexRequest.prototype.isGreaterThan = function (col, val) {
        this.add(col, val, '>');
    };
    FilterConsumerBridgeToKnexRequest.prototype.isLessOrEqualTo = function (col, val) {
        this.add(col, val, '<=');
    };
    FilterConsumerBridgeToKnexRequest.prototype.isLessThan = function (col, val) {
        this.add(col, val, '<');
    };
    FilterConsumerBridgeToKnexRequest.prototype.containsCaseInsensitive = function (col, val) {
        var _this = this;
        this.result.push(function (b) {
            return b.whereRaw('lower (' +
                b.client.ref(_this.innerNameProvider.$dbNameOf(col)) +
                ") like lower ('%" +
                val.replace(/'/g, "''") +
                "%')");
        });
        this.promises.push((function () { return tslib_1.__awaiter(_this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/];
        }); }); })());
    };
    FilterConsumerBridgeToKnexRequest.prototype.notContainsCaseInsensitive = function (col, val) {
        var _this = this;
        this.result.push(function (b) {
            return b.whereRaw('not lower (' +
                b.client.ref(_this.innerNameProvider.$dbNameOf(col)) +
                ") like lower ('%" +
                val.replace(/'/g, "''") +
                "%')");
        });
        this.promises.push((function () { return tslib_1.__awaiter(_this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/];
        }); }); })());
    };
    FilterConsumerBridgeToKnexRequest.prototype.startsWithCaseInsensitive = function (col, val) {
        var _this = this;
        this.result.push(function (b) {
            return b.whereRaw('lower (' +
                b.client.ref(_this.innerNameProvider.$dbNameOf(col)) +
                ") like lower ('" +
                val.replace(/'/g, "''") +
                "%')");
        });
        this.promises.push((function () { return tslib_1.__awaiter(_this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/];
        }); }); })());
    };
    FilterConsumerBridgeToKnexRequest.prototype.endsWithCaseInsensitive = function (col, val) {
        var _this = this;
        this.result.push(function (b) {
            return b.whereRaw('lower (' +
                b.client.ref(_this.innerNameProvider.$dbNameOf(col)) +
                ") like lower ('%" +
                val.replace(/'/g, "''") +
                "')");
        });
        this.promises.push((function () { return tslib_1.__awaiter(_this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/];
        }); }); })());
    };
    FilterConsumerBridgeToKnexRequest.prototype.add = function (col, val, operator) {
        var _this = this;
        this.result.push(function (b) {
            return b.where(_this.innerNameProvider.$dbNameOf(col), operator, translateValueAndHandleArrayAndHandleArray(col, val));
        });
    };
    FilterConsumerBridgeToKnexRequest.prototype.databaseCustom = function (databaseCustom) {
        var _this = this;
        this.promises.push((function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var _a, _b, r_2, item, sql_1;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!(databaseCustom === null || databaseCustom === void 0 ? void 0 : databaseCustom.buildKnex)) return [3 /*break*/, 2];
                        _b = (_a = this.result).push;
                        return [4 /*yield*/, databaseCustom.buildKnex()];
                    case 1:
                        _b.apply(_a, [_c.sent()]);
                        _c.label = 2;
                    case 2:
                        if (!(databaseCustom === null || databaseCustom === void 0 ? void 0 : databaseCustom.buildSql)) return [3 /*break*/, 4];
                        r_2 = new KnexCommandHelper();
                        item = new filter_consumer_bridge_to_sql_request_js_1.CustomSqlFilterBuilder(r_2, this.rawSqlWrapIdentifier);
                        return [4 /*yield*/, databaseCustom.buildSql(item)];
                    case 3:
                        sql_1 = _c.sent();
                        if (typeof sql_1 !== 'string')
                            sql_1 = item.sql;
                        if (sql_1) {
                            this.result.push(function (b) { return b.whereRaw(sql_1, r_2.values); });
                        }
                        _c.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        }); })());
    };
    return FilterConsumerBridgeToKnexRequest;
}());
var KnexSchemaBuilder = /** @class */ (function () {
    function KnexSchemaBuilder(knex) {
        this.knex = knex;
        this.additionalWhere = '';
    }
    KnexSchemaBuilder.prototype.verifyStructureOfAllEntities = function (remult) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var entities;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!remult)
                            remult = remult_proxy_js_1.remult;
                        entities = remult_static_js_1.remultStatic.allEntities.map(function (x) { return remult.repo(x).metadata; });
                        return [4 /*yield*/, this.ensureSchema(entities)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    KnexSchemaBuilder.prototype.ensureSchema = function (entities) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var entities_1, entities_1_1, entity, e, err_2, e_8_1;
            var e_8, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 10, 11, 12]);
                        entities_1 = tslib_1.__values(entities), entities_1_1 = entities_1.next();
                        _b.label = 1;
                    case 1:
                        if (!!entities_1_1.done) return [3 /*break*/, 9];
                        entity = entities_1_1.value;
                        return [4 /*yield*/, (0, filter_consumer_bridge_to_sql_request_js_2.dbNamesOf)(entity, function (x) { return x; })];
                    case 2:
                        e = _b.sent();
                        _b.label = 3;
                    case 3:
                        _b.trys.push([3, 7, , 8]);
                        if (!(0, filter_consumer_bridge_to_sql_request_js_2.shouldCreateEntity)(entity, e)) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.createIfNotExist(entity)];
                    case 4:
                        _b.sent();
                        return [4 /*yield*/, this.verifyAllColumns(entity)];
                    case 5:
                        _b.sent();
                        _b.label = 6;
                    case 6: return [3 /*break*/, 8];
                    case 7:
                        err_2 = _b.sent();
                        console.error('failed ensure schema of ' + e.$entityName + ' ', err_2);
                        throw err_2;
                    case 8:
                        entities_1_1 = entities_1.next();
                        return [3 /*break*/, 1];
                    case 9: return [3 /*break*/, 12];
                    case 10:
                        e_8_1 = _b.sent();
                        e_8 = { error: e_8_1 };
                        return [3 /*break*/, 12];
                    case 11:
                        try {
                            if (entities_1_1 && !entities_1_1.done && (_a = entities_1.return)) _a.call(entities_1);
                        }
                        finally { if (e_8) throw e_8.error; }
                        return [7 /*endfinally*/];
                    case 12: return [2 /*return*/];
                }
            });
        });
    };
    KnexSchemaBuilder.prototype.createIfNotExist = function (entity) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var e;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, filter_consumer_bridge_to_sql_request_js_2.dbNamesOf)(entity, function (x) { return x; })];
                    case 1:
                        e = _a.sent();
                        return [4 /*yield*/, this.knex.schema.hasTable(e.$entityName)];
                    case 2:
                        if (!!(_a.sent())) return [3 /*break*/, 4];
                        return [4 /*yield*/, logSql(this.createTableKnexCommand(entity, e))];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    KnexSchemaBuilder.prototype.createTableKnexCommand = function (entity, e) {
        var e_9, _a;
        var _this = this;
        var cols = new Map();
        try {
            for (var _b = tslib_1.__values(entity.fields), _c = _b.next(); !_c.done; _c = _b.next()) {
                var f = _c.value;
                cols.set(f, {
                    name: e.$dbNameOf(f),
                    readonly: (0, filter_consumer_bridge_to_sql_request_js_2.shouldNotCreateField)(f, e),
                });
            }
        }
        catch (e_9_1) { e_9 = { error: e_9_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_9) throw e_9.error; }
        }
        return this.knex.schema.createTable(e.$entityName, function (b) {
            var e_10, _a;
            try {
                for (var _b = tslib_1.__values(entity.fields), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var x = _c.value;
                    if (!cols.get(x).readonly || (0, RepositoryImplementation_js_1.isAutoIncrement)(x)) {
                        if ((0, RepositoryImplementation_js_1.isAutoIncrement)(x))
                            b.increments(cols.get(x).name);
                        else {
                            buildColumn(x, cols.get(x).name, b, supportsJsonDataStorage(_this.knex));
                        }
                    }
                }
            }
            catch (e_10_1) { e_10 = { error: e_10_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_10) throw e_10.error; }
            }
            b.primary(entity.idMetadata.fields.map(function (f) { return e.$dbNameOf(f); }));
        });
    };
    KnexSchemaBuilder.prototype.addColumnIfNotExist = function (entity, c) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var e, col, colName;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, filter_consumer_bridge_to_sql_request_js_2.dbNamesOf)(entity, function (x) { return x; })];
                    case 1:
                        e = _a.sent();
                        if ((0, filter_consumer_bridge_to_sql_request_js_2.shouldNotCreateField)(c(entity), e))
                            return [2 /*return*/];
                        col = c(entity);
                        colName = e.$dbNameOf(col);
                        return [4 /*yield*/, this.knex.schema.hasColumn(e.$entityName, colName)];
                    case 2:
                        if (!!(_a.sent())) return [3 /*break*/, 4];
                        return [4 /*yield*/, logSql(this.createColumnKnexCommand(e, col, colName))];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    KnexSchemaBuilder.prototype.createColumnKnexCommand = function (e, col, colName) {
        var _this = this;
        return this.knex.schema.alterTable(e.$entityName, function (b) {
            buildColumn(col, colName, b, supportsJsonDataStorage(_this.knex));
        });
    };
    KnexSchemaBuilder.prototype.verifyAllColumns = function (entity) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var e, _loop_2, this_2, _a, _b, col, e_11_1, err_3;
            var e_11, _c;
            return tslib_1.__generator(this, function (_d) {
                switch (_d.label) {
                    case 0: return [4 /*yield*/, (0, filter_consumer_bridge_to_sql_request_js_2.dbNamesOf)(entity, function (x) { return x; })];
                    case 1:
                        e = _d.sent();
                        _d.label = 2;
                    case 2:
                        _d.trys.push([2, 11, , 12]);
                        _loop_2 = function (col) {
                            return tslib_1.__generator(this, function (_e) {
                                switch (_e.label) {
                                    case 0:
                                        if (!!(0, filter_consumer_bridge_to_sql_request_js_2.shouldNotCreateField)(col, e)) return [3 /*break*/, 2];
                                        return [4 /*yield*/, this_2.addColumnIfNotExist(entity, function () { return col; })];
                                    case 1:
                                        _e.sent();
                                        _e.label = 2;
                                    case 2: return [2 /*return*/];
                                }
                            });
                        };
                        this_2 = this;
                        _d.label = 3;
                    case 3:
                        _d.trys.push([3, 8, 9, 10]);
                        _a = tslib_1.__values(entity.fields.toArray()), _b = _a.next();
                        _d.label = 4;
                    case 4:
                        if (!!_b.done) return [3 /*break*/, 7];
                        col = _b.value;
                        return [5 /*yield**/, _loop_2(col)];
                    case 5:
                        _d.sent();
                        _d.label = 6;
                    case 6:
                        _b = _a.next();
                        return [3 /*break*/, 4];
                    case 7: return [3 /*break*/, 10];
                    case 8:
                        e_11_1 = _d.sent();
                        e_11 = { error: e_11_1 };
                        return [3 /*break*/, 10];
                    case 9:
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        }
                        finally { if (e_11) throw e_11.error; }
                        return [7 /*endfinally*/];
                    case 10: return [3 /*break*/, 12];
                    case 11:
                        err_3 = _d.sent();
                        console.error(err_3);
                        return [3 /*break*/, 12];
                    case 12: return [2 /*return*/];
                }
            });
        });
    };
    //@internal
    KnexSchemaBuilder.logToConsole = true;
    return KnexSchemaBuilder;
}());
exports.KnexSchemaBuilder = KnexSchemaBuilder;
function supportsJsonDataStorage(knex) {
    var client = knex.client.config.client;
    if ((client === null || client === void 0 ? void 0 : client.includes('sqlite3')) || (client === null || client === void 0 ? void 0 : client.includes('mssql')))
        return false;
    return true;
}
function supportsJsonLoadingAndSaving(knex) {
    var client = knex.client.config.client;
    if ((client === null || client === void 0 ? void 0 : client.includes('sqlite3')) ||
        (client === null || client === void 0 ? void 0 : client.includes('mssql')) ||
        client == 'mysql')
        return false;
    return true;
}
function buildColumn(x, dbName, b, supportsJson) {
    if (supportsJson === void 0) { supportsJson = true; }
    if (x.valueType == Number) {
        if (!x.valueConverter.fieldTypeInDb) {
            var c = b.decimal(dbName, 18, 2);
            if (!x.allowNull) {
                c.defaultTo(0).notNullable();
            }
        }
        else if (x.valueConverter.fieldTypeInDb == 'integer') {
            var c = b.integer(dbName);
            if (!x.allowNull) {
                c.defaultTo(0).notNullable();
            }
        }
        else
            b.specificType(dbName, x.valueConverter.fieldTypeInDb);
    }
    else if (x.valueType == Date) {
        if (!x.valueConverter.fieldTypeInDb)
            if (x.valueConverter == valueConverters_js_1.ValueConverters.DateOnly)
                b.date(dbName);
            else
                b.dateTime(dbName);
        else if (x.valueConverter.fieldTypeInDb == 'date')
            b.date(dbName);
        else
            b.specificType(dbName, x.valueConverter.fieldTypeInDb);
    }
    else if (x.valueType == Boolean) {
        var c = b.boolean(dbName);
        if (!x.allowNull)
            c.defaultTo(false).notNullable();
    }
    else if (x.valueConverter.fieldTypeInDb) {
        if (x.valueConverter.fieldTypeInDb == 'integer') {
            var c = b.integer(dbName);
            if (!x.allowNull) {
                c.defaultTo(0).notNullable();
            }
        }
        else if (x.valueConverter.fieldTypeInDb == 'json')
            if (supportsJson)
                b.json(dbName);
            else {
                var c = b.text(dbName);
                if (!x.allowNull)
                    c.defaultTo('').notNullable();
            }
        else
            b.specificType(dbName, x.valueConverter.fieldTypeInDb);
    }
    else if (x.valueType === String) {
        var c = b.string(dbName, x.options.maxLength);
        if (!x.allowNull)
            c.defaultTo('').notNullable();
    }
    else {
        var c = b.text(dbName);
        if (!x.allowNull)
            c.defaultTo('').notNullable();
    }
}
exports.buildColumn = buildColumn;
function logSql(who) {
    if (KnexSchemaBuilder.logToConsole)
        console.info(who.toSQL());
    return who;
}
function createKnexDataProvider(config) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var k, result;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, Promise.resolve().then(function () { return tslib_1.__importStar(require('knex')); })];
                case 1:
                    k = (_a.sent()).default(config);
                    result = new KnexDataProvider(k);
                    return [2 /*return*/, result];
            }
        });
    });
}
exports.createKnexDataProvider = createKnexDataProvider;
function translateValueAndHandleArrayAndHandleArray(field, val) {
    var result = field.valueConverter.toDb(val);
    if (Array.isArray(result))
        return JSON.stringify(result);
    return result;
}
var KnexCommandHelper = /** @class */ (function () {
    function KnexCommandHelper() {
        this.values = {};
        this.i = 0;
    }
    KnexCommandHelper.prototype.addParameterAndReturnSqlToken = function (val) {
        return this.param(val);
    };
    KnexCommandHelper.prototype.param = function (val) {
        if (Array.isArray(val))
            val = JSON.stringify(val);
        var key = ':' + this.i++;
        this.values[key.substring(1)] = val;
        return key;
    };
    return KnexCommandHelper;
}());
var KnexBridgeToSQLCommand = /** @class */ (function (_super) {
    tslib_1.__extends(KnexBridgeToSQLCommand, _super);
    function KnexBridgeToSQLCommand(source) {
        var _this = _super.call(this) || this;
        _this.source = source;
        _this.values = {};
        _this.i = 0;
        return _this;
    }
    KnexBridgeToSQLCommand.prototype.addParameterAndReturnSqlToken = function (val) {
        return this.param(val);
    };
    KnexBridgeToSQLCommand.prototype.param = function (val) {
        if (Array.isArray(val))
            val = JSON.stringify(val);
        var key = ':' + this.i++;
        this.values[key.substring(1)] = val;
        return key;
    };
    KnexBridgeToSQLCommand.prototype.execute = function (sql) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.source.raw(sql, this.values).then(function (r) {
                            switch (_this.source.client.config.client) {
                                case 'mysql':
                                case 'mysql2':
                                    return new KnexPostgresBridgeToSQLQueryResult({
                                        fields: r[1],
                                        rows: r[0],
                                    });
                                case 'pg':
                                    return new KnexPostgresBridgeToSQLQueryResult(r);
                                default:
                                case 'better-sqlite3':
                                case 'mssql':
                                    return new KnexPostgresBridgeToSQLQueryResult({
                                        rows: r,
                                    });
                            }
                        })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return KnexBridgeToSQLCommand;
}(KnexCommandHelper));
var KnexPostgresBridgeToSQLQueryResult = /** @class */ (function () {
    function KnexPostgresBridgeToSQLQueryResult(r) {
        this.r = r;
        this.rows = r.rows;
    }
    KnexPostgresBridgeToSQLQueryResult.prototype.getColumnKeyInResultForIndexInSelect = function (index) {
        if (this.r.fields)
            return this.r.fields[index].name;
        if (this.rows.length == 0)
            throw Error('No rows');
        var i = 0;
        for (var m in this.rows[0]) {
            if (i++ == index)
                return m;
        }
        throw Error('index not found');
    };
    return KnexPostgresBridgeToSQLQueryResult;
}());
