import { getEntityRef, getEntitySettings } from '../remult3/getEntityRef.js';
import { getRelationFieldInfo } from '../remult3/relationInfoMember.js';
/**
 * The `Filter` class is a helper class that focuses on filter-related concerns. It provides methods
 * for creating and applying filters in queries.
 */
export class Filter {
    apply;
    //@internal
    static throwErrorIfFilterIsEmpty(where, methodName) {
        if (Filter.isFilterEmpty(where)) {
            throw {
                message: `${methodName}: requires a filter to protect against accidental delete/update of all rows`,
                httpStatusCode: 400,
            };
        }
    }
    //@internal
    static isFilterEmpty(where) {
        if (where.$and) {
            for (const a of where.$and) {
                if (!Filter.isFilterEmpty(a)) {
                    return false;
                }
            }
        }
        if (where.$or) {
            for (const a of where.$or) {
                if (Filter.isFilterEmpty(a)) {
                    return true;
                }
            }
            return false;
        }
        if (Object.keys(where).filter((x) => !['$or', '$and'].includes(x)).length == 0) {
            return true;
        }
        return false;
    }
    /**
     * Retrieves precise values for each property in a filter for an entity.
     * @template entityType The type of the entity being filtered.
     * @param metadata The metadata of the entity being filtered.
     * @param filter The filter to analyze.
     * @returns A promise that resolves to a FilterPreciseValues object containing the precise values for each property.
     * @example
     * const preciseValues = await Filter.getPreciseValues(meta, {
     *   status: { $ne: 'active' },
     *   $or: [
     *     { customerId: ["1", "2"] },
     *     { customerId: "3" }
     *   ]
     * });
     * console.log(preciseValues);
     * // Output:
     * // {
     * //   "customerId": ["1", "2", "3"], // Precise values inferred from the filter
     * //   "status": undefined,           // Cannot infer precise values for 'status'
     * // }
    
     */
    static async getPreciseValues(metadata, filter) {
        const result = new preciseValuesCollector();
        await Filter.fromEntityFilter(metadata, filter).__applyToConsumer(result);
        return result.preciseValues;
    }
    /**
     * Retrieves precise values for each property in a filter for an entity.
     * @template entityType The type of the entity being filtered.
     * @param metadata The metadata of the entity being filtered.
     * @param filter The filter to analyze.
     * @returns A promise that resolves to a FilterPreciseValues object containing the precise values for each property.
     * @example
     * const preciseValues = await where.getPreciseValues();
     * console.log(preciseValues);
     * // Output:
     * // {
     * //   "customerId": ["1", "2", "3"], // Precise values inferred from the filter
     * //   "status": undefined,           // Cannot infer precise values for 'status'
     * // }
    
     */
    async getPreciseValues() {
        const result = new preciseValuesCollector();
        await this.__applyToConsumer(result);
        return result.preciseValues;
    }
    static createCustom(translator, key = '') {
        let rawFilterInfo = { key: key, rawFilterTranslator: translator };
        return Object.assign((x) => {
            let z = {};
            if (x == undefined)
                x = {};
            if (!rawFilterInfo.key)
                throw 'Usage of custom filter before a key was assigned to it';
            return {
                [customUrlToken + rawFilterInfo.key]: x,
            };
        }, { rawFilterInfo });
    }
    /**
     * Translates an `EntityFilter` to a plain JSON object that can be stored or transported.
     *
     * @template T The entity type for the filter.
     * @param {EntityMetadata<T>} entityDefs The metadata of the entity associated with the filter.
     * @param {EntityFilter<T>} where The `EntityFilter` to be translated.
     * @returns {any} A plain JSON object representing the `EntityFilter`.
     *
     * @example
     * // Assuming `Task` is an entity class
     * const jsonFilter = Filter.entityFilterToJson(Task, { completed: true });
     * // `jsonFilter` can now be stored or transported as JSON
     */
    static entityFilterToJson(entityDefs, where) {
        return Filter.fromEntityFilter(entityDefs, where).toJson();
    }
    /**
     * Translates a plain JSON object back into an `EntityFilter`.
     *
     * @template T The entity type for the filter.
     * @param {EntityMetadata<T>} entityDefs The metadata of the entity associated with the filter.
     * @param {any} packed The plain JSON object representing the `EntityFilter`.
     * @returns {EntityFilter<T>} The reconstructed `EntityFilter`.
     *
     * @example
     * // Assuming `Task` is an entity class and `jsonFilter` is a JSON object representing an EntityFilter
     * const taskFilter = Filter.entityFilterFromJson(Task, jsonFilter);
     * // Using the reconstructed `EntityFilter` in a query
     * const tasks = await remult.repo(Task).find({ where: taskFilter });
     * for (const task of tasks) {
     *   // Do something for each task based on the filter
     * }
     */
    static entityFilterFromJson(entityDefs, packed) {
        return buildFilterFromRequestParameters(entityDefs, {
            get: (key) => packed[key],
        });
    }
    /**
     * Converts an `EntityFilter` to a `Filter` that can be used by the `DataProvider`. This method is
     * mainly used internally.
     *
     * @template T The entity type for the filter.
     * @param {EntityMetadata<T>} entity The metadata of the entity associated with the filter.
     * @param {EntityFilter<T>} whereItem The `EntityFilter` to be converted.
     * @returns {Filter} A `Filter` instance that can be used by the `DataProvider`.
     *
     * @example
     * // Assuming `Task` is an entity class and `taskFilter` is an EntityFilter
     * const filter = Filter.fromEntityFilter(Task, taskFilter);
     * // `filter` can now be used with the DataProvider
     */
    static fromEntityFilter(entity, whereItem) {
        let result = [];
        for (const key in whereItem) {
            if (Object.prototype.hasOwnProperty.call(whereItem, key)) {
                let fieldToFilter = whereItem[key];
                {
                    if (key == '$or') {
                        result.push(new OrFilter(...fieldToFilter.map((x) => Filter.fromEntityFilter(entity, x))));
                    }
                    else if (key == '$not') {
                        result.push(new NotFilter(Filter.fromEntityFilter(entity, fieldToFilter)));
                    }
                    else if (key == '$and') {
                        result.push(new AndFilter(...fieldToFilter.map((x) => Filter.fromEntityFilter(entity, x))));
                    }
                    else if (key.startsWith(customUrlToken)) {
                        result.push(new Filter((x) => {
                            x.custom(key.substring(customUrlToken.length), fieldToFilter);
                        }));
                    }
                    else if (key == customDatabaseFilterToken) {
                        result.push(new Filter((x) => x.databaseCustom(fieldToFilter)));
                    }
                    else {
                        const field = entity.fields[key];
                        const rel = getRelationFieldInfo(field);
                        const op = field.options;
                        let fh = rel?.type === 'toOne'
                            ? op.fields
                                ? new manyToOneFilterHelper(field, entity.fields, op)
                                : new toOneFilterHelper(entity.fields[op.field])
                            : new filterHelper(field);
                        let found = false;
                        if (fieldToFilter !== undefined && fieldToFilter != null) {
                            if (fieldToFilter.$id !== undefined)
                                fieldToFilter = fieldToFilter.$id;
                            for (const key in fieldToFilter) {
                                if (Object.prototype.hasOwnProperty.call(fieldToFilter, key)) {
                                    const element = fieldToFilter[key];
                                    switch (key) {
                                        case '$gte':
                                        case '>=':
                                            result.push(fh.isGreaterOrEqualTo(element));
                                            found = true;
                                            break;
                                        case '$gt':
                                        case '>':
                                            result.push(fh.isGreaterThan(element));
                                            found = true;
                                            break;
                                        case '$lte':
                                        case '<=':
                                            result.push(fh.isLessOrEqualTo(element));
                                            found = true;
                                            break;
                                        case '$lt':
                                        case '<':
                                            result.push(fh.isLessThan(element));
                                            found = true;
                                            break;
                                        case '$ne':
                                        case '!=':
                                        case '$nin':
                                            found = true;
                                            if (Array.isArray(element)) {
                                                result.push(fh.isNotIn(element));
                                            }
                                            else
                                                result.push(fh.isDifferentFrom(element));
                                            break;
                                        case '$in':
                                            found = true;
                                            result.push(fh.isIn(element));
                                            break;
                                        case '$contains':
                                            found = true;
                                            result.push(fh.contains(element));
                                            break;
                                        case '$startsWith':
                                            found = true;
                                            result.push(fh.startsWith(element));
                                            break;
                                        case '$endsWith':
                                            found = true;
                                            result.push(fh.endsWith(element));
                                            break;
                                        case '$notContains':
                                            found = true;
                                            result.push(fh.notContains(element));
                                            break;
                                    }
                                }
                            }
                            if (Array.isArray(fieldToFilter)) {
                                found = true;
                                result.push(fh.isIn(fieldToFilter));
                            }
                        }
                        if (!found && fieldToFilter !== undefined) {
                            result.push(fh.isEqualTo(fieldToFilter));
                        }
                    }
                }
            }
        }
        return new AndFilter(...result);
    }
    constructor(apply) {
        this.apply = apply;
    }
    __applyToConsumer(add) {
        this.apply(add);
    }
    /**
     * Resolves an entity filter.
     *
     * This method takes a filter which can be either an instance of `EntityFilter`
     * or a function that returns an instance of `EntityFilter` or a promise that
     * resolves to an instance of `EntityFilter`. It then resolves the filter if it
     * is a function and returns the resulting `EntityFilter`.
     *
     * @template entityType The type of the entity that the filter applies to.
     * @param {EntityFilter<entityType> | (() => EntityFilter<entityType> | Promise<EntityFilter<entityType>>)} filter The filter to resolve.
     * @returns {Promise<EntityFilter<entityType>>} The resolved entity filter.
     */
    static async resolve(filter) {
        if (typeof filter === 'function')
            return await filter();
        return filter;
    }
    toJson() {
        let r = new FilterSerializer();
        this.__applyToConsumer(r);
        return r.result;
    }
    //@internal
    static async translateCustomWhere(r, entity, remult) {
        let f = new customTranslator(async (filterKey, custom) => {
            let r = [];
            for (const key in entity.entityType) {
                const element = entity.entityType[key];
                if (element &&
                    element.rawFilterInfo &&
                    element.rawFilterInfo.rawFilterTranslator) {
                    if (element.rawFilterInfo.key == filterKey) {
                        r.push(await Filter.fromEntityFilter(entity, await element.rawFilterInfo.rawFilterTranslator(custom, remult)));
                    }
                }
            }
            return r;
        });
        r.__applyToConsumer(f);
        await f.resolve();
        r = new Filter((x) => f.applyTo(x));
        return r;
    }
}
class filterHelper {
    metadata;
    constructor(metadata) {
        this.metadata = metadata;
    }
    processVal(val) {
        let ei = getEntitySettings(this.metadata.valueType, false);
        if (ei) {
            if (val === undefined || val === null) {
                if (val === null && !this.metadata.allowNull) {
                    const rel = getRelationFieldInfo(this.metadata);
                    if (rel?.type === 'reference')
                        if (rel.toRepo.metadata.idMetadata.field.options.valueType === Number)
                            return 0;
                        else
                            return '';
                }
                return null;
            }
            if (typeof val === 'string' || typeof val === 'number')
                return val;
            return getEntityRef(val).getId();
        }
        return val;
    }
    contains(val) {
        return new Filter((add) => add.containsCaseInsensitive(this.metadata, val));
    }
    notContains(val) {
        return new Filter((add) => add.notContainsCaseInsensitive(this.metadata, val));
    }
    startsWith(val) {
        return new Filter((add) => add.startsWithCaseInsensitive(this.metadata, val));
    }
    endsWith(val) {
        return new Filter((add) => add.endsWithCaseInsensitive(this.metadata, val));
    }
    isLessThan(val) {
        val = this.processVal(val);
        return new Filter((add) => add.isLessThan(this.metadata, val));
    }
    isGreaterOrEqualTo(val) {
        val = this.processVal(val);
        return new Filter((add) => add.isGreaterOrEqualTo(this.metadata, val));
    }
    isNotIn(values) {
        return new Filter((add) => {
            for (const v of values) {
                add.isDifferentFrom(this.metadata, this.processVal(v));
            }
        });
    }
    isDifferentFrom(val) {
        val = this.processVal(val);
        if ((val === null || val === undefined) && this.metadata.allowNull)
            return new Filter((add) => add.isNotNull(this.metadata));
        return new Filter((add) => add.isDifferentFrom(this.metadata, val));
    }
    isLessOrEqualTo(val) {
        val = this.processVal(val);
        return new Filter((add) => add.isLessOrEqualTo(this.metadata, val));
    }
    isGreaterThan(val) {
        val = this.processVal(val);
        return new Filter((add) => add.isGreaterThan(this.metadata, val));
    }
    isEqualTo(val) {
        val = this.processVal(val);
        if ((val === null || val === undefined) && this.metadata.allowNull)
            return new Filter((add) => add.isNull(this.metadata));
        return new Filter((add) => add.isEqualTo(this.metadata, val));
    }
    isIn(val) {
        val = val.map((x) => this.processVal(x));
        if (val?.length == 1 && val[0] != undefined && val[0] !== null)
            return new Filter((add) => add.isEqualTo(this.metadata, val[0]));
        return new Filter((add) => add.isIn(this.metadata, val));
    }
}
class toOneFilterHelper extends filterHelper {
    processVal(val) {
        if (!val)
            return null;
        if (typeof val === 'string' || typeof val === 'number')
            return val;
        return getEntityRef(val).getId();
    }
}
class manyToOneFilterHelper {
    metadata;
    fields;
    relationOptions;
    constructor(metadata, fields, relationOptions) {
        this.metadata = metadata;
        this.fields = fields;
        this.relationOptions = relationOptions;
    }
    processVal(val) {
        throw new Error('Invalid for Many To One Relation Field');
    }
    contains(val) {
        throw new Error('Invalid for Many To One Relation Field');
    }
    notContains(val) {
        throw new Error('Invalid for Many To One Relation Field');
    }
    endsWith(val) {
        throw new Error('Invalid for Many To One Relation Field');
    }
    startsWith(val) {
        throw new Error('Invalid for Many To One Relation Field');
    }
    isLessThan(val) {
        throw new Error('Invalid for Many To One Relation Field');
    }
    isGreaterOrEqualTo(val) {
        throw new Error('Invalid for Many To One Relation Field');
    }
    isNotIn(values) {
        return new Filter((add) => {
            values.forEach((v) => this.isDifferentFrom(v).__applyToConsumer(add));
        });
    }
    isDifferentFrom(val) {
        return new Filter((add) => {
            const or = [];
            for (const key in this.relationOptions.fields) {
                if (Object.prototype.hasOwnProperty.call(this.relationOptions.fields, key)) {
                    const keyInMyEntity = this.relationOptions.fields[key];
                    or.push(new Filter((add) => new filterHelper(this.fields.find(keyInMyEntity))
                        .isDifferentFrom(val[key])
                        .__applyToConsumer(add)));
                }
            }
            add.or(or);
        });
    }
    isLessOrEqualTo(val) {
        throw new Error('Invalid for Many To One Relation Field');
    }
    isGreaterThan(val) {
        throw new Error('Invalid for Many To One Relation Field');
    }
    isEqualTo(val) {
        return new Filter((add) => {
            for (const key in this.relationOptions.fields) {
                if (Object.prototype.hasOwnProperty.call(this.relationOptions.fields, key)) {
                    const keyInMyEntity = this.relationOptions.fields[key];
                    new filterHelper(this.fields.find(keyInMyEntity))
                        .isEqualTo(val[key])
                        .__applyToConsumer(add);
                }
            }
        });
    }
    isIn(val) {
        return new Filter((add) => {
            add.or(val.map((v) => this.isEqualTo(v)));
        });
    }
}
export class AndFilter extends Filter {
    filters;
    constructor(...filters) {
        super((add) => {
            for (const iterator of this.filters) {
                if (iterator)
                    iterator.__applyToConsumer(add);
            }
        });
        this.filters = filters;
    }
    add(filter) {
        this.filters.push(filter);
    }
}
export class OrFilter extends Filter {
    filters;
    constructor(...filters) {
        super((add) => {
            let f = this.filters.filter((x) => x !== undefined);
            if (f.length > 1) {
                add.or(f);
            }
            else if (f.length == 1)
                f[0].__applyToConsumer(add);
        });
        this.filters = filters;
    }
}
export class NotFilter extends Filter {
    filter;
    constructor(filter) {
        super((add) => {
            add.not(filter);
        });
        this.filter = filter;
    }
}
export const customUrlToken = '$custom$';
export const customDatabaseFilterToken = '$db$';
const customArrayToken = '$an array';
export class FilterSerializer {
    result = {};
    constructor() { }
    databaseCustom(databaseCustom) {
        throw new Error('database custom is not allowed with api calls.');
    }
    custom(key, customItem) {
        if (Array.isArray(customItem))
            customItem = { [customArrayToken]: customItem };
        this.add(customUrlToken + key, customItem);
    }
    hasUndefined = false;
    add(key, val) {
        if (val === undefined)
            this.hasUndefined = true;
        let r = this.result;
        if (!r[key]) {
            r[key] = val;
            return;
        }
        let v = r[key];
        if (v instanceof Array) {
            v.push(val);
        }
        else
            v = [v, val];
        r[key] = v;
    }
    or(orElements) {
        this.add('OR', orElements.map((x) => {
            let f = new FilterSerializer();
            x.__applyToConsumer(f);
            return f.result;
        }));
    }
    not(filter) {
        let f = new FilterSerializer();
        filter.__applyToConsumer(f);
        this.add('NOT', f.result);
    }
    isNull(col) {
        this.add(col.key + '.null', true);
    }
    isNotNull(col) {
        this.add(col.key + '.null', false);
    }
    isIn(col, val) {
        this.add(col.key + '.in', val.map((x) => col.valueConverter.toJson(x)));
    }
    isEqualTo(col, val) {
        this.add(col.key, col.valueConverter.toJson(val));
    }
    isDifferentFrom(col, val) {
        this.add(col.key + '.ne', col.valueConverter.toJson(val));
    }
    isGreaterOrEqualTo(col, val) {
        this.add(col.key + '.gte', col.valueConverter.toJson(val));
    }
    isGreaterThan(col, val) {
        this.add(col.key + '.gt', col.valueConverter.toJson(val));
    }
    isLessOrEqualTo(col, val) {
        this.add(col.key + '.lte', col.valueConverter.toJson(val));
    }
    isLessThan(col, val) {
        this.add(col.key + '.lt', col.valueConverter.toJson(val));
    }
    containsCaseInsensitive(col, val) {
        this.add(col.key + '.contains', val);
    }
    notContainsCaseInsensitive(col, val) {
        this.add(col.key + '.notContains', val);
    }
    startsWithCaseInsensitive(col, val) {
        this.add(col.key + '.startsWith', val);
    }
    endsWithCaseInsensitive(col, val) {
        this.add(col.key + '.endsWith', val);
    }
}
export function entityFilterToJson(entityDefs, where) {
    if (!where)
        return {};
    return Filter.fromEntityFilter(entityDefs, where).toJson();
}
export function buildFilterFromRequestParameters(entity, filterInfo) {
    let where = {};
    function addAnd(what) {
        if (!where.$and) {
            where.$and = [];
        }
        where.$and.push(what);
    }
    function addToFilterObject(key, val) {
        if (where[key] === undefined)
            where[key] = val;
        else {
            addAnd({ [key]: val });
        }
    }
    ;
    [...entity.fields].forEach((col) => {
        function addFilter(operation, theFilter, jsonArray = false, asString = false) {
            let val = filterInfo.get(col.key + operation);
            if (val !== undefined) {
                let addFilter = (val) => {
                    let theVal = val;
                    if (jsonArray) {
                        let arr;
                        if (typeof val === 'string')
                            arr = JSON.parse(val);
                        else
                            arr = val;
                        theVal = arr.map((x) => asString ? x : col.valueConverter.fromJson(x));
                    }
                    else {
                        theVal = asString ? theVal : col.valueConverter.fromJson(theVal);
                    }
                    let f = theFilter(theVal);
                    if (f !== undefined) {
                        addToFilterObject(col.key, f);
                    }
                };
                if (!jsonArray && val instanceof Array) {
                    val.forEach((v) => {
                        addFilter(v);
                    });
                }
                else {
                    if (jsonArray) {
                        if (typeof val === 'string')
                            val = JSON.parse(val);
                    }
                    const array = separateArrayFromInnerArray(val);
                    for (const x of array) {
                        addFilter(x);
                    }
                }
            }
        }
        addFilter('', (val) => val);
        addFilter('.gt', (val) => ({ $gt: val }));
        addFilter('.gte', (val) => ({ $gte: val }));
        addFilter('.lt', (val) => ({ $lt: val }));
        addFilter('.lte', (val) => ({ $lte: val }));
        addFilter('.ne', (val) => ({ $ne: val }));
        addFilter('.in', (val) => val, true);
        var nullFilter = filterInfo.get(col.key + '.null');
        if (nullFilter) {
            nullFilter = nullFilter.toString().trim().toLowerCase();
            switch (nullFilter) {
                case 'y':
                case 'true':
                case 'yes':
                    addToFilterObject(col.key, null);
                    break;
                default:
                    addToFilterObject(col.key, { $ne: null });
                    break;
            }
        }
        addFilter('.contains', (val) => ({ $contains: val }), false, true);
        addFilter('.notContains', (val) => ({ $notContains: val }), false, true);
        addFilter('.startsWith', (val) => ({ $startsWith: val }), false, true);
        addFilter('.endsWith', (val) => ({ $endsWith: val }), false, true);
    });
    let val = filterInfo.get('OR');
    if (val) {
        const array = separateArrayFromInnerArray(val);
        const or = array.map((v) => ({
            $or: v.map((x) => buildFilterFromRequestParameters(entity, {
                get: (key) => x[key],
            })),
        }));
        if (or.length == 1) {
            if (!where.$or) {
                where.$or = or[0].$or;
            }
            else {
                where.$or.push(or[0].$or);
            }
        }
        else {
            addAnd({
                $and: or,
            });
        }
    }
    val = filterInfo.get('NOT');
    if (val) {
        let array = separateArrayFromInnerArray(val);
        const not = [];
        for (const e1 of array) {
            let z = e1;
            if (Array.isArray(e1)) {
                for (const e2 of e1) {
                    not.push({
                        $not: buildFilterFromRequestParameters(entity, {
                            get: (key) => e2[key],
                        }),
                    });
                }
            }
            else
                not.push({
                    $not: buildFilterFromRequestParameters(entity, {
                        get: (key) => e1[key],
                    }),
                });
        }
        if (not.length == 1 && !where.$not) {
            where = not[0];
        }
        else {
            addAnd({
                $and: not,
            });
        }
    }
    for (const key in entity.entityType) {
        const element = entity.entityType[key];
        if (element &&
            element.rawFilterInfo &&
            element.rawFilterInfo.rawFilterTranslator) {
            let custom = filterInfo.get(customUrlToken + key);
            if (custom !== undefined) {
                const addItem = (item) => {
                    if (item[customArrayToken] != undefined)
                        item = item[customArrayToken];
                    addToFilterObject(customUrlToken + key, item);
                };
                if (Array.isArray(custom)) {
                    custom.forEach((item) => addItem(item));
                }
                else
                    addItem(custom);
            }
        }
    }
    return where;
    function separateArrayFromInnerArray(val) {
        if (!Array.isArray(val))
            return [val];
        const nonArray = [], array = [];
        for (const v of val) {
            if (Array.isArray(v)) {
                array.push(v);
            }
            else
                nonArray.push(v);
        }
        array.push(nonArray);
        return array;
    }
}
class customTranslator {
    translateCustom;
    applyTo(x) {
        this.commands.forEach((y) => y(x));
    }
    constructor(translateCustom) {
        this.translateCustom = translateCustom;
    }
    commands = [];
    promises = [];
    or(orElements) {
        let newOrElements;
        this.promises.push(Promise.all(orElements.map(async (element) => {
            let c = new customTranslator(this.translateCustom);
            element.__applyToConsumer(c);
            await c.resolve();
            return new Filter((x) => c.applyTo(x));
        })).then((x) => {
            newOrElements = x;
        }));
        this.commands.push((x) => x.or(newOrElements));
    }
    not(filter) {
        let newNotElement;
        this.promises.push((async () => {
            let c = new customTranslator(this.translateCustom);
            filter.__applyToConsumer(c);
            await c.resolve();
            newNotElement = new Filter((x) => c.applyTo(x));
        })());
        this.commands.push((x) => x.not(newNotElement));
    }
    isEqualTo(col, val) {
        this.commands.push((x) => x.isEqualTo(col, val));
    }
    isDifferentFrom(col, val) {
        this.commands.push((x) => x.isDifferentFrom(col, val));
    }
    isNull(col) {
        this.commands.push((x) => x.isNull(col));
    }
    isNotNull(col) {
        this.commands.push((x) => x.isNotNull(col));
    }
    isGreaterOrEqualTo(col, val) {
        this.commands.push((x) => x.isGreaterOrEqualTo(col, val));
    }
    isGreaterThan(col, val) {
        this.commands.push((x) => x.isGreaterThan(col, val));
    }
    isLessOrEqualTo(col, val) {
        this.commands.push((x) => x.isLessOrEqualTo(col, val));
    }
    isLessThan(col, val) {
        this.commands.push((x) => x.isLessThan(col, val));
    }
    containsCaseInsensitive(col, val) {
        this.commands.push((x) => x.containsCaseInsensitive(col, val));
    }
    notContainsCaseInsensitive(col, val) {
        this.commands.push((x) => x.notContainsCaseInsensitive(col, val));
    }
    startsWithCaseInsensitive(col, val) {
        this.commands.push((x) => x.startsWithCaseInsensitive(col, val));
    }
    endsWithCaseInsensitive(col, val) {
        this.commands.push((x) => x.endsWithCaseInsensitive(col, val));
    }
    isIn(col, val) {
        this.commands.push((x) => x.isIn(col, val));
    }
    custom(key, customItem) {
        this.promises.push((async () => {
            let r = await this.translateCustom(key, customItem);
            if (r)
                if (Array.isArray(r))
                    r.forEach((x) => x.__applyToConsumer(this));
                else
                    r.__applyToConsumer(this);
        })());
    }
    databaseCustom(custom) {
        this.commands.push((x) => x.databaseCustom(custom));
    }
    async resolve() {
        while (this.promises.length > 0) {
            let p = this.promises;
            this.promises = [];
            await Promise.all(p);
        }
    }
}
export function __updateEntityBasedOnWhere(entityDefs, where, r) {
    let w = Filter.fromEntityFilter(entityDefs, where);
    const emptyFunction = () => { };
    if (w) {
        w.__applyToConsumer({
            custom: emptyFunction,
            databaseCustom: emptyFunction,
            containsCaseInsensitive: emptyFunction,
            notContainsCaseInsensitive: emptyFunction,
            startsWithCaseInsensitive: emptyFunction,
            endsWithCaseInsensitive: emptyFunction,
            isDifferentFrom: emptyFunction,
            isEqualTo: (col, val) => {
                r[col.key] = val;
            },
            isGreaterOrEqualTo: emptyFunction,
            isGreaterThan: emptyFunction,
            isIn: emptyFunction,
            isLessOrEqualTo: emptyFunction,
            isLessThan: emptyFunction,
            isNotNull: emptyFunction,
            isNull: emptyFunction,
            not: emptyFunction,
            or: emptyFunction,
        });
    }
}
class preciseValuesCollector {
    rawValues = {};
    preciseValues = new Proxy(this.rawValues, {
        get: (target, prop) => {
            if (prop in target) {
                let result = target[prop];
                if (result.bad)
                    return undefined;
                if (result.values.length > 0) {
                    const relInfo = getRelationFieldInfo(result.field);
                    if (relInfo) {
                        if (relInfo.type === 'reference') {
                            return result.values.map((x) => {
                                return relInfo.toRepo.metadata.idMetadata.getIdFilter(x);
                            });
                        }
                        else
                            throw new Error('Only relations toOne without field are supported.');
                    }
                    return result.values;
                }
            }
            return undefined;
        },
    });
    ok(col, ...val) {
        let x = this.rawValues[col.key];
        if (!x) {
            this.rawValues[col.key] = {
                field: col,
                bad: false,
                values: [...val],
            };
        }
        else {
            x.values.push(...val.filter((y) => !x.values.includes(y)));
        }
    }
    notOk(col) {
        let x = this.rawValues[col.key];
        if (!x) {
            this.rawValues[col.key] = {
                field: col,
                bad: true,
                values: [],
            };
        }
        else {
            x.bad = true;
        }
    }
    not(filter) { }
    or(orElements) {
        const result = orElements.map((or) => {
            let x = new preciseValuesCollector();
            or.__applyToConsumer(x);
            return x;
        });
        for (const or of result) {
            for (const key in or.rawValues) {
                if (Object.prototype.hasOwnProperty.call(or.rawValues, key)) {
                    const element = or.rawValues[key];
                    if (element) {
                        if (element.bad)
                            this.notOk(element.field);
                        else {
                            this.ok(element.field, ...element.values);
                        }
                    }
                }
            }
        }
        for (const key in this.rawValues) {
            if (Object.prototype.hasOwnProperty.call(this.rawValues, key)) {
                for (const r of result) {
                    const element = r.rawValues[key];
                    if (!element)
                        this.notOk(this.rawValues[key].field);
                }
            }
        }
    }
    isEqualTo(col, val) {
        this.ok(col, val);
    }
    isDifferentFrom(col, val) {
        this.notOk(col);
    }
    isNull(col) {
        this.ok(col, null);
    }
    isNotNull(col) {
        this.notOk(col);
    }
    isGreaterOrEqualTo(col, val) {
        this.notOk(col);
    }
    isGreaterThan(col, val) {
        this.notOk(col);
    }
    isLessOrEqualTo(col, val) {
        this.notOk(col);
    }
    isLessThan(col, val) {
        this.notOk(col);
    }
    containsCaseInsensitive(col, val) {
        this.notOk(col);
    }
    notContainsCaseInsensitive(col, val) {
        this.notOk(col);
    }
    startsWithCaseInsensitive(col, val) {
        this.notOk(col);
    }
    endsWithCaseInsensitive(col, val) {
        this.notOk(col);
    }
    isIn(col, val) {
        this.ok(col, ...val);
    }
    custom(key, customItem) { }
    databaseCustom(databaseCustom) { }
}
