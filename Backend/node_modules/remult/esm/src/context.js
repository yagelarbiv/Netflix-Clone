import { RestDataProvider } from './data-providers/rest-data-provider.js';
import { LiveQueryClient } from './live-query/LiveQueryClient.js';
import { SseSubscriptionClient } from './live-query/SseSubscriptionClient.js';
import { remult } from './remult-proxy.js';
import { RepositoryImplementation, createOldEntity, } from './remult3/RepositoryImplementation.js';
import { serverActionField } from './server-action-info.js';
import { buildRestDataProvider, isExternalHttpProvider, } from './buildRestDataProvider.js';
import { verifyFieldRelationInfo } from './remult3/relationInfoMember.js';
import { remultStatic, resetFactory } from './remult-static.js';
import { initDataProvider } from '../server/initDataProvider.js';
export class RemultAsyncLocalStorage {
    remultObjectStorage;
    static enable() {
        remultStatic.remultFactory = () => {
            const r = remultStatic.asyncContext.getStore();
            if (r)
                return r.remult;
            else
                throw new Error('remult object was requested outside of a valid context, try running it within initApi or a remult request cycle');
        };
    }
    static disable() {
        resetFactory();
    }
    constructor(remultObjectStorage) {
        this.remultObjectStorage = remultObjectStorage;
    }
    async run(remult, callback) {
        if (this.remultObjectStorage) {
            return this.remultObjectStorage.run({ remult }, () => callback(remult));
        }
        else
            return callback(remult);
    }
    isInInitRequest() {
        return this.remultObjectStorage?.getStore()?.inInitRequest;
    }
    setInInitRequest(val) {
        const store = this.remultObjectStorage?.getStore();
        if (!store)
            return;
        store.inInitRequest = val;
    }
    getStore() {
        if (!this.remultObjectStorage) {
            throw new Error("can't use static remult in this environment, `async_hooks` were not initialized");
        }
        return this.remultObjectStorage.getStore();
    }
}
if (!remultStatic.asyncContext)
    remultStatic.asyncContext = new RemultAsyncLocalStorage(undefined);
export function isBackend() {
    return remultStatic.actionInfo.runningOnServer || !remult.dataProvider.isProxy;
}
export class Remult {
    /**Return's a `Repository` of the specific entity type
     * @example
     * const taskRepo = remult.repo(Task);
     * @see [Repository](https://remult.dev/docs/ref_repository.html)
     * @param entity - the entity to use
     * @param dataProvider - an optional alternative data provider to use. Useful for writing to offline storage or an alternative data provider
     */
    repo = (entity, dataProvider) => {
        if (dataProvider === undefined)
            dataProvider = this.dataProvider;
        let dpCache = this.repCache.get(dataProvider);
        if (!dpCache)
            this.repCache.set(dataProvider, (dpCache = new Map()));
        let r = dpCache.get(entity);
        if (!r) {
            dpCache.set(entity, (r = new RepositoryImplementation(entity, this, dataProvider, createOldEntity(entity, this))));
            verifyFieldRelationInfo(r, this, dataProvider);
        }
        return r;
    };
    /** Returns the current user's info */
    user;
    /** Checks if a user was authenticated */
    authenticated() {
        return this.user?.id !== undefined;
    }
    /** checks if the user has any of the roles specified in the parameters
     * @example
     * remult.isAllowed("admin")
     * @see
     * [Allowed](https://remult.dev/docs/allowed.html)
     */
    isAllowed(roles) {
        if (roles == undefined)
            return undefined;
        if (roles instanceof Array) {
            for (const role of roles) {
                if (this.isAllowed(role) === true) {
                    return true;
                }
            }
            return false;
        }
        if (typeof roles === 'function') {
            return roles(this);
        }
        if (typeof roles === 'boolean')
            return roles;
        if (typeof roles === 'string')
            if (this.user?.roles?.includes(roles.toString()))
                return true;
        return false;
    }
    /** checks if the user matches the allowedForInstance callback
     * @see
     * [Allowed](https://remult.dev/docs/allowed.html)
     */
    isAllowedForInstance(instance, allowed) {
        if (Array.isArray(allowed)) {
            {
                for (const item of allowed) {
                    if (this.isAllowedForInstance(instance, item))
                        return true;
                }
            }
        }
        else if (typeof allowed === 'function') {
            return allowed(instance, this);
        }
        else
            return this.isAllowed(allowed);
        return undefined;
    }
    /** The current data provider */
    dataProvider = new RestDataProvider(() => this.apiClient);
    /* @internal */
    repCache = new Map();
    constructor(provider) {
        if (provider && provider.getEntityDataProvider) {
            this.dataProvider = provider;
            return;
        }
        if (isExternalHttpProvider(provider)) {
            this.apiClient.httpClient = provider;
        }
        else if (typeof provider === 'function')
            this.apiClient.httpClient = provider;
        else if (provider) {
            const apiClient = provider;
            if (apiClient.httpClient)
                this.apiClient.httpClient = apiClient.httpClient;
            if (apiClient.url)
                this.apiClient.url = apiClient.url;
            if (apiClient.subscriptionClient)
                this.apiClient.subscriptionClient = apiClient.subscriptionClient;
            if (apiClient.wrapMessageHandling)
                this.apiClient.wrapMessageHandling = apiClient.wrapMessageHandling;
        }
    }
    liveQueryStorage;
    subscriptionServer;
    /* @internal*/
    liveQueryPublisher = {
        itemChanged: async () => { },
    };
    //@ts-ignore // type error of typescript regarding args that doesn't appear in my normal development
    /** Used to call a `backendMethod` using a specific `remult` object
     * @example
     * await remult.call(TasksController.setAll, undefined, true);
     * @param backendMethod - the backend method to call
     * @param classInstance - the class instance of the backend method, for static backend methods use undefined
     * @param args - the arguments to send to the backend method
     */
    call(backendMethod, classInstance, ...args) {
        const z = backendMethod[serverActionField];
        if (!z.doWork)
            throw Error('The method received is not a valid backend method');
        //@ts-ignore
        return z.doWork(args, classInstance, this.apiClient.url, buildRestDataProvider(this.apiClient.httpClient));
    }
    /* @internal*/
    liveQuerySubscriber = new LiveQueryClient(() => this.apiClient, () => this.user?.id);
    /** A helper callback that can be used to debug and trace all find operations. Useful in debugging scenarios */
    static onFind = (metadata, options) => { };
    clearAllCache() {
        this.repCache.clear();
    }
    /** A helper callback that is called whenever an entity is created. */
    static entityRefInit;
    /** context information that can be used to store custom information that will be disposed as part of the `remult` object */
    context = {};
    /** The api client that will be used by `remult` to perform calls to the `api` */
    apiClient = {
        url: '/api',
        subscriptionClient: new SseSubscriptionClient(),
    };
}
remultStatic.defaultRemultFactory = () => new Remult();
export class ClassHelper {
    classes = new Map();
}
export function setControllerSettings(target, options) {
    let r = target;
    while (true) {
        let helper = remultStatic.classHelpers.get(r);
        if (!helper)
            remultStatic.classHelpers.set(r, (helper = new ClassHelper()));
        helper.classes.set(target, options);
        let p = Object.getPrototypeOf(r.prototype);
        if (p == null)
            break;
        r = p.constructor;
    }
}
export class Allow {
    static everyone = () => true;
    static authenticated = (...args) => {
        if (args.length > 1) {
            return args[1].authenticated();
        }
        else if (args.length == 1) {
            if (args[0].authenticated)
                return args[0].authenticated();
        }
        return remult.authenticated();
    };
}
export const queryConfig = {
    defaultPageSize: 200,
};
export class EventSource {
    listeners = [];
    async fire() {
        for (const l of this.listeners) {
            await l();
        }
    }
    dispatcher = {
        observe: async (what) => {
            this.listeners.push(what);
            await what();
            return () => {
                this.listeners = this.listeners.filter((x) => x != what);
            };
        },
    };
}
export async function doTransaction(remult, what) {
    const trans = new transactionLiveQueryPublisher(remult.liveQueryPublisher);
    let ok = true;
    const prev = remult.dataProvider;
    try {
        await remult.dataProvider.transaction(async (ds) => {
            remult.dataProvider = ds;
            remult.liveQueryPublisher = trans;
            await what(ds);
            ok = true;
        });
        if (ok)
            await trans.flush();
    }
    finally {
        remult.dataProvider = prev;
    }
}
class transactionLiveQueryPublisher {
    orig;
    constructor(orig) {
        this.orig = orig;
    }
    transactionItems = new Map();
    async itemChanged(entityKey, changes) {
        let items = this.transactionItems.get(entityKey);
        if (!items) {
            this.transactionItems.set(entityKey, (items = []));
        }
        for (const c of changes) {
            if (c.oldId !== undefined) {
                const item = items.find((y) => y.id === c.oldId);
                if (item !== undefined) {
                    if (c.deleted)
                        item.deleted = true;
                    if (c.id != item.id)
                        item.id = c.id;
                }
                else
                    items.push(c);
            }
            else
                items.push(c);
        }
    }
    async flush() {
        for (const key of this.transactionItems.keys()) {
            await this.orig.itemChanged(key, this.transactionItems.get(key));
        }
    }
}
export async function withRemult(callback, options) {
    const remult = new Remult();
    remult.dataProvider = await initDataProvider(options?.dataProvider, true, async () => remult.dataProvider);
    return remultStatic.asyncContext.run(remult, (r) => callback(r));
}
