import { AsyncLocalStorage } from 'async_hooks';
import { RemultAsyncLocalStorage, } from '../src/context.js';
import { remultStatic } from '../src/remult-static.js';
let init = false;
export function initAsyncHooks() {
    if (init)
        return;
    init = true;
    remultStatic.asyncContext = new RemultAsyncLocalStorage(new AsyncLocalStorageBridgeToRemultAsyncLocalStorageCore());
    let test = new AsyncLocalStorage();
    test.run(1, async () => {
        await Promise.resolve();
        if (test.getStore() === undefined) {
            console.log("async_hooks.AsyncLocalStorage not working, using stub implementation (You're probably running on stackblitz, this will work on a normal nodejs environment)");
            remultStatic.asyncContext = new RemultAsyncLocalStorage(new StubRemultAsyncLocalStorageCore());
        }
    });
}
export class AsyncLocalStorageBridgeToRemultAsyncLocalStorageCoreImpl {
    asyncLocalStorage = new AsyncLocalStorage();
    wasImplemented;
    run(store, callback) {
        let r;
        this.asyncLocalStorage.run(store, () => {
            r = new Promise(async (res, rej) => {
                try {
                    res(await callback());
                }
                catch (err) {
                    rej(err);
                }
            });
        });
        return r;
    }
    getStore() {
        return this.asyncLocalStorage.getStore();
    }
}
const ignoreInStack = [
    'AsyncLocalStorageBridgeToRemultAsyncLocalStorageCore.run',
    'RemultAsyncLocalStorage.run',
    'Module.withRemult',
    'RemultServerImplementation.runWithRemult',
];
export class SequentialRemultAsyncLocalStorageCore {
    wasImplemented;
    async run(store, callback) {
        let log = (msg) => { };
        if (false) {
            let stack = new Error().stack;
            let y = stack.split('\n');
            while (y.length > 0 &&
                (y[0].trim().startsWith('Error') ||
                    ignoreInStack.includes(y[0].trim().split(' ')[1]))) {
                y.splice(0, 1);
            }
            stack = y.join('\n');
            log = (msg) => {
                console.log(msg, stack);
            };
        }
        log('waiting on ');
        const nextPromise = this.lastPromise.then(async () => {
            log('executing  ');
            const previousValue = this.currentValue;
            this.currentValue = store;
            const result = await callback();
            this.currentValue = previousValue;
            return result;
        });
        this.lastPromise = nextPromise.catch(() => {
            log('Error on ');
            return undefined;
        });
        try {
            return await nextPromise;
        }
        finally {
            log('completed  ');
        }
    }
    getStore() {
        return this.currentValue;
    }
    lastPromise = Promise.resolve(undefined);
    currentValue;
}
export class StubRemultAsyncLocalStorageCore {
    wasImplemented;
    async run(store, callback) {
        this.currentValue = store;
        return await callback();
    }
    getStore() {
        return this.currentValue;
    }
    lastPromise = Promise.resolve(undefined);
    currentValue;
}
export class AsyncLocalStorageBridgeToRemultAsyncLocalStorageCore extends AsyncLocalStorageBridgeToRemultAsyncLocalStorageCoreImpl {
}
