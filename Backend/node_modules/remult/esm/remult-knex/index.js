import { CustomSqlFilterBuilder, dbNamesOfWithForceSqlExpression, } from '../src/filter/filter-consumer-bridge-to-sql-request.js';
import { dbNamesOf, isDbReadonly, shouldCreateEntity, shouldNotCreateField, } from '../src/filter/filter-consumer-bridge-to-sql-request.js';
import { customDatabaseFilterToken, Filter, } from '../src/filter/filter-interfaces.js';
import { remult as remultContext } from '../src/remult-proxy.js';
import { getRepository, isAutoIncrement, } from '../src/remult3/RepositoryImplementation.js';
import { Sort } from '../src/sort.js';
import { ValueConverters } from '../src/valueConverters.js';
import { getRepositoryInternals } from '../src/remult3/repository-internals.js';
import { remultStatic } from '../src/remult-static.js';
import { getRowAfterUpdate } from '../src/data-providers/sql-database.js';
export class KnexDataProvider {
    knex;
    constructor(knex) {
        this.knex = knex;
    }
    end() {
        return this.knex.destroy();
    }
    provideMigrationBuilder(builder) {
        var sb = new KnexSchemaBuilder(this.knex);
        return {
            async createTable(entity) {
                let e = await dbNamesOf(entity, (x) => x);
                sb.createTableKnexCommand(entity, e)
                    .toSQL()
                    .forEach((sql) => builder.addSql(sql.sql));
            },
            async addColumn(entity, field) {
                let e = await dbNamesOf(entity, (x) => x);
                await sb
                    .createColumnKnexCommand(e, field, e.$dbNameOf(field))
                    .toSQL()
                    .forEach((sql) => builder.addSql(sql.sql));
            },
        };
    }
    createCommand() {
        return new KnexBridgeToSQLCommand(this.knex);
    }
    execute(sql) {
        return this.createCommand().execute(sql);
    }
    static getDb(dataProvider) {
        const r = (dataProvider || remultContext.dataProvider);
        if (!r.knex)
            throw 'the data provider is not an KnexDataProvider';
        return r.knex;
    }
    wrapIdentifier = (x) => this.knex.ref(x) + '';
    getEntityDataProvider(entity) {
        if (!supportsJsonLoadingAndSaving(this.knex))
            for (const f of entity.fields.toArray()) {
                if (f.valueConverter.fieldTypeInDb === 'json') {
                    //@ts-ignore
                    f.valueConverter = {
                        ...f.valueConverter,
                        toDb: ValueConverters.JsonString.toDb,
                        fromDb: ValueConverters.JsonString.fromDb,
                    };
                }
            }
        else if (this.knex.client.config.client === 'mysql2') {
            for (const f of entity.fields.toArray()) {
                if (f.valueConverter.fieldTypeInDb === 'json') {
                    //@ts-ignore
                    f.valueConverter = {
                        ...f.valueConverter,
                        toDb: ValueConverters.JsonString.toDb,
                    };
                }
            }
        }
        return new KnexEntityDataProvider(entity, this.knex, this.wrapIdentifier);
    }
    async transaction(action) {
        let t = await this.knex.transaction();
        try {
            await action(new KnexDataProvider(t));
            await t.commit();
        }
        catch (err) {
            await t.rollback();
            throw err;
        }
    }
    static rawFilter(build) {
        return {
            [customDatabaseFilterToken]: {
                buildKnex: build,
            },
        };
    }
    static async filterToRaw(entity, condition, wrapIdentifier) {
        const repo = getRepository(entity);
        var b = new FilterConsumerBridgeToKnexRequest(await dbNamesOfWithForceSqlExpression(repo.metadata, (x) => x), wrapIdentifier);
        b._addWhere = false;
        await (await getRepositoryInternals(repo)._translateWhereToFilter(condition)).__applyToConsumer(b);
        let r = await b.resolveWhere();
        return (knex) => r.forEach((y) => y(knex));
    }
    isProxy;
    async ensureSchema(entities) {
        var sb = new KnexSchemaBuilder(this.knex);
        await sb.ensureSchema(entities);
    }
}
class KnexEntityDataProvider {
    entity;
    knex;
    rawSqlWrapIdentifier;
    constructor(entity, knex, rawSqlWrapIdentifier) {
        this.entity = entity;
        this.knex = knex;
        this.rawSqlWrapIdentifier = rawSqlWrapIdentifier;
    }
    async count(where) {
        const e = await this.init();
        const br = new FilterConsumerBridgeToKnexRequest(e, this.rawSqlWrapIdentifier);
        where.__applyToConsumer(br);
        let r = await br.resolveWhere();
        const result = await this.knex(e.$entityName)
            .count()
            .where((b) => r.forEach((w) => w(b)));
        var row = result[0];
        for (const key in row) {
            if (Object.prototype.hasOwnProperty.call(row, key)) {
                const element = row[key];
                return +element;
            }
        }
        throw Error("couldn't find count member");
    }
    async find(options) {
        const e = await this.init();
        let cols = [];
        let colKeys = [];
        for (const x of this.entity.fields) {
            if (x.isServerExpression) {
            }
            else {
                let name = e.$dbNameOf(x);
                if (x.options.sqlExpression)
                    name = this.knex.raw('?? as ' + x.key, [name]);
                cols.push(name);
                colKeys.push(x);
            }
        }
        let query = this.knex(e.$entityName).select(cols);
        if (options?.where) {
            const br = new FilterConsumerBridgeToKnexRequest(e, this.rawSqlWrapIdentifier);
            options.where.__applyToConsumer(br);
            let r = await br.resolveWhere();
            query.where((b) => r.forEach((y) => y(b)));
        }
        if (!options.orderBy) {
            options.orderBy = Sort.createUniqueSort(this.entity, new Sort());
        }
        if (options.orderBy) {
            query = query.orderBy(options.orderBy.Segments.map((s) => ({
                column: e.$dbNameOf(s.field),
                order: s.isDescending ? 'desc' : 'asc',
            })));
        }
        if (options.limit) {
            query = query.limit(options.limit);
            if (options.page)
                query = query.offset((options.page - 1) * options.limit);
        }
        const r = await query;
        return r.map((y) => {
            let result = {};
            let i = 0;
            for (let m in y) {
                let field = colKeys[i++];
                try {
                    result[field.key] = field.valueConverter.fromDb(y[m]);
                }
                catch (err) {
                    throw new Error('Failed to load from db:' + field.key + '\r\n' + err);
                }
            }
            return result;
        });
    }
    async init() {
        const r = (await dbNamesOfWithForceSqlExpression(this.entity, (x) => x));
        return {
            $dbNameOf: (f) => {
                let fm = f;
                if (fm.options.sqlExpression)
                    return this.knex.raw(r.$dbNameOf(f));
                return r.$dbNameOf(f);
            },
            $entityName: r.$entityName,
            wrapIdentifier: r.wrapIdentifier,
        };
    }
    async update(id, data) {
        const e = await this.init();
        let f = new FilterConsumerBridgeToKnexRequest(e, this.rawSqlWrapIdentifier);
        Filter.fromEntityFilter(this.entity, this.entity.idMetadata.getIdFilter(id)).__applyToConsumer(f);
        let updateObject = {};
        for (const x of this.entity.fields) {
            if (isDbReadonly(x, e)) {
            }
            else if (data[x.key] !== undefined) {
                let v = translateValueAndHandleArrayAndHandleArray(x, data[x.key]);
                if (v !== undefined) {
                    let key = await e.$dbNameOf(x);
                    updateObject[key] = v;
                }
            }
        }
        let where = await f.resolveWhere();
        await this.knex(e.$entityName)
            .update(updateObject)
            .where((b) => where.forEach((w) => w(b)));
        return getRowAfterUpdate(this.entity, this, data, id, 'update');
    }
    async delete(id) {
        const e = await this.init();
        let f = new FilterConsumerBridgeToKnexRequest(e, this.rawSqlWrapIdentifier);
        Filter.fromEntityFilter(this.entity, this.entity.idMetadata.getIdFilter(id)).__applyToConsumer(f);
        let where = await f.resolveWhere();
        await this.knex(e.$entityName)
            .delete()
            .where((b) => where.forEach((w) => w(b)));
    }
    async insert(data) {
        const e = await this.init();
        let insertObject = {};
        for (const x of this.entity.fields) {
            if (isDbReadonly(x, e)) {
            }
            else {
                let v = translateValueAndHandleArrayAndHandleArray(x, data[x.key]);
                if (v != undefined) {
                    let key = await e.$dbNameOf(x);
                    insertObject[key] = v;
                }
            }
        }
        let insert = this.knex(e.$entityName).insert(insertObject);
        if (isAutoIncrement(this.entity.idMetadata.field)) {
            let newId;
            if (this.knex.client.config.client === 'mysql2' ||
                this.knex.client.config.client === 'mysql') {
                let result = await insert;
                newId = result[0];
            }
            else {
                let result = await insert.returning(this.entity.idMetadata.field.key);
                newId = result[0].id;
            }
            return this.find({
                where: new Filter((x) => x.isEqualTo(this.entity.idMetadata.field, newId)),
            }).then((y) => y[0]);
        }
        else
            await insert;
        return getRowAfterUpdate(this.entity, this, data, undefined, 'insert');
    }
}
class FilterConsumerBridgeToKnexRequest {
    innerNameProvider;
    rawSqlWrapIdentifier;
    _addWhere = true;
    promises = [];
    result = [];
    async resolveWhere() {
        while (this.promises.length > 0) {
            let p = this.promises;
            this.promises = [];
            for (const pr of p) {
                await pr;
            }
        }
        return this.result;
    }
    constructor(innerNameProvider, rawSqlWrapIdentifier) {
        this.innerNameProvider = innerNameProvider;
        this.rawSqlWrapIdentifier = rawSqlWrapIdentifier;
    }
    custom(key, customItem) {
        throw new Error('Custom filter should be translated before it gets here');
    }
    or(orElements) {
        this.promises.push((async () => {
            const result = [];
            for (const element of orElements) {
                let f = new FilterConsumerBridgeToKnexRequest(this.innerNameProvider, this.rawSqlWrapIdentifier);
                f._addWhere = false;
                element.__applyToConsumer(f);
                let where = await f.resolveWhere();
                if (where.length > 0) {
                    result.push((b) => {
                        b.orWhere((b) => {
                            where.forEach((x) => x(b));
                        });
                    });
                }
                else
                    return; //empty or means all rows
            }
            if (result.length > 0) {
                this.result.push((b) => b.where((x) => result.find((y) => y(x))));
            }
        })());
    }
    not(element) {
        this.promises.push((async () => {
            let f = new FilterConsumerBridgeToKnexRequest(this.innerNameProvider, this.rawSqlWrapIdentifier);
            f._addWhere = false;
            element.__applyToConsumer(f);
            let where = await f.resolveWhere();
            if (where.length > 0) {
                this.result.push((b) => {
                    b.whereNot((b) => {
                        where.forEach((x) => x(b));
                    });
                });
            }
            else
                return; //empty or means all rows
        })());
    }
    isNull(col) {
        this.result.push((b) => b.whereNull(this.innerNameProvider.$dbNameOf(col)));
    }
    isNotNull(col) {
        this.result.push((b) => b.whereNotNull(this.innerNameProvider.$dbNameOf(col)));
    }
    isIn(col, val) {
        this.result.push((knex) => knex.whereIn(this.innerNameProvider.$dbNameOf(col), val.map((x) => translateValueAndHandleArrayAndHandleArray(col, x))));
    }
    isEqualTo(col, val) {
        this.add(col, val, '=');
    }
    isDifferentFrom(col, val) {
        this.add(col, val, '<>');
    }
    isGreaterOrEqualTo(col, val) {
        this.add(col, val, '>=');
    }
    isGreaterThan(col, val) {
        this.add(col, val, '>');
    }
    isLessOrEqualTo(col, val) {
        this.add(col, val, '<=');
    }
    isLessThan(col, val) {
        this.add(col, val, '<');
    }
    containsCaseInsensitive(col, val) {
        this.result.push((b) => b.whereRaw('lower (' +
            b.client.ref(this.innerNameProvider.$dbNameOf(col)) +
            ") like lower ('%" +
            val.replace(/'/g, "''") +
            "%')"));
        this.promises.push((async () => { })());
    }
    notContainsCaseInsensitive(col, val) {
        this.result.push((b) => b.whereRaw('not lower (' +
            b.client.ref(this.innerNameProvider.$dbNameOf(col)) +
            ") like lower ('%" +
            val.replace(/'/g, "''") +
            "%')"));
        this.promises.push((async () => { })());
    }
    startsWithCaseInsensitive(col, val) {
        this.result.push((b) => b.whereRaw('lower (' +
            b.client.ref(this.innerNameProvider.$dbNameOf(col)) +
            ") like lower ('" +
            val.replace(/'/g, "''") +
            "%')"));
        this.promises.push((async () => { })());
    }
    endsWithCaseInsensitive(col, val) {
        this.result.push((b) => b.whereRaw('lower (' +
            b.client.ref(this.innerNameProvider.$dbNameOf(col)) +
            ") like lower ('%" +
            val.replace(/'/g, "''") +
            "')"));
        this.promises.push((async () => { })());
    }
    add(col, val, operator) {
        this.result.push((b) => b.where(this.innerNameProvider.$dbNameOf(col), operator, translateValueAndHandleArrayAndHandleArray(col, val)));
    }
    databaseCustom(databaseCustom) {
        this.promises.push((async () => {
            if (databaseCustom?.buildKnex) {
                this.result.push(await databaseCustom.buildKnex());
            }
            if (databaseCustom?.buildSql) {
                let r = new KnexCommandHelper();
                const item = new CustomSqlFilterBuilder(r, this.rawSqlWrapIdentifier);
                let sql = await databaseCustom.buildSql(item);
                if (typeof sql !== 'string')
                    sql = item.sql;
                if (sql) {
                    this.result.push((b) => b.whereRaw(sql, r.values));
                }
            }
        })());
    }
}
export class KnexSchemaBuilder {
    knex;
    //@internal
    static logToConsole = true;
    async verifyStructureOfAllEntities(remult) {
        if (!remult)
            remult = remultContext;
        const entities = remultStatic.allEntities.map((x) => remult.repo(x).metadata);
        await this.ensureSchema(entities);
    }
    async ensureSchema(entities) {
        for (const entity of entities) {
            let e = await dbNamesOf(entity, (x) => x);
            try {
                if (shouldCreateEntity(entity, e)) {
                    await this.createIfNotExist(entity);
                    await this.verifyAllColumns(entity);
                }
            }
            catch (err) {
                console.error('failed ensure schema of ' + e.$entityName + ' ', err);
                throw err;
            }
        }
    }
    async createIfNotExist(entity) {
        const e = await dbNamesOf(entity, (x) => x);
        if (!(await this.knex.schema.hasTable(e.$entityName))) {
            await logSql(this.createTableKnexCommand(entity, e));
        }
    }
    createTableKnexCommand(entity, e) {
        let cols = new Map();
        for (const f of entity.fields) {
            cols.set(f, {
                name: e.$dbNameOf(f),
                readonly: shouldNotCreateField(f, e),
            });
        }
        return this.knex.schema.createTable(e.$entityName, (b) => {
            for (const x of entity.fields) {
                if (!cols.get(x).readonly || isAutoIncrement(x)) {
                    if (isAutoIncrement(x))
                        b.increments(cols.get(x).name);
                    else {
                        buildColumn(x, cols.get(x).name, b, supportsJsonDataStorage(this.knex));
                    }
                }
            }
            b.primary(entity.idMetadata.fields.map((f) => e.$dbNameOf(f)));
        });
    }
    async addColumnIfNotExist(entity, c) {
        let e = await dbNamesOf(entity, (x) => x);
        if (shouldNotCreateField(c(entity), e))
            return;
        let col = c(entity);
        let colName = e.$dbNameOf(col);
        if (!(await this.knex.schema.hasColumn(e.$entityName, colName))) {
            await logSql(this.createColumnKnexCommand(e, col, colName));
        }
    }
    createColumnKnexCommand(e, col, colName) {
        return this.knex.schema.alterTable(e.$entityName, (b) => {
            buildColumn(col, colName, b, supportsJsonDataStorage(this.knex));
        });
    }
    async verifyAllColumns(entity) {
        let e = await dbNamesOf(entity, (x) => x);
        try {
            for (const col of entity.fields.toArray()) {
                if (!shouldNotCreateField(col, e)) {
                    await this.addColumnIfNotExist(entity, () => col);
                }
            }
        }
        catch (err) {
            console.error(err);
        }
    }
    additionalWhere = '';
    constructor(knex) {
        this.knex = knex;
    }
}
function supportsJsonDataStorage(knex) {
    const client = knex.client.config.client;
    if (client?.includes('sqlite3') || client?.includes('mssql'))
        return false;
    return true;
}
function supportsJsonLoadingAndSaving(knex) {
    const client = knex.client.config.client;
    if (client?.includes('sqlite3') ||
        client?.includes('mssql') ||
        client == 'mysql')
        return false;
    return true;
}
export function buildColumn(x, dbName, b, supportsJson = true) {
    if (x.valueType == Number) {
        if (!x.valueConverter.fieldTypeInDb) {
            let c = b.decimal(dbName, 18, 2);
            if (!x.allowNull) {
                c.defaultTo(0).notNullable();
            }
        }
        else if (x.valueConverter.fieldTypeInDb == 'integer') {
            let c = b.integer(dbName);
            if (!x.allowNull) {
                c.defaultTo(0).notNullable();
            }
        }
        else
            b.specificType(dbName, x.valueConverter.fieldTypeInDb);
    }
    else if (x.valueType == Date) {
        if (!x.valueConverter.fieldTypeInDb)
            if (x.valueConverter == ValueConverters.DateOnly)
                b.date(dbName);
            else
                b.dateTime(dbName);
        else if (x.valueConverter.fieldTypeInDb == 'date')
            b.date(dbName);
        else
            b.specificType(dbName, x.valueConverter.fieldTypeInDb);
    }
    else if (x.valueType == Boolean) {
        let c = b.boolean(dbName);
        if (!x.allowNull)
            c.defaultTo(false).notNullable();
    }
    else if (x.valueConverter.fieldTypeInDb) {
        if (x.valueConverter.fieldTypeInDb == 'integer') {
            let c = b.integer(dbName);
            if (!x.allowNull) {
                c.defaultTo(0).notNullable();
            }
        }
        else if (x.valueConverter.fieldTypeInDb == 'json')
            if (supportsJson)
                b.json(dbName);
            else {
                let c = b.text(dbName);
                if (!x.allowNull)
                    c.defaultTo('').notNullable();
            }
        else
            b.specificType(dbName, x.valueConverter.fieldTypeInDb);
    }
    else if (x.valueType === String) {
        let c = b.string(dbName, x.options.maxLength);
        if (!x.allowNull)
            c.defaultTo('').notNullable();
    }
    else {
        let c = b.text(dbName);
        if (!x.allowNull)
            c.defaultTo('').notNullable();
    }
}
function logSql(who) {
    if (KnexSchemaBuilder.logToConsole)
        console.info(who.toSQL());
    return who;
}
export async function createKnexDataProvider(config) {
    let k = (await import('knex')).default(config);
    let result = new KnexDataProvider(k);
    return result;
}
function translateValueAndHandleArrayAndHandleArray(field, val) {
    let result = field.valueConverter.toDb(val);
    if (Array.isArray(result))
        return JSON.stringify(result);
    return result;
}
class KnexCommandHelper {
    values = {};
    i = 0;
    addParameterAndReturnSqlToken(val) {
        return this.param(val);
    }
    param(val) {
        if (Array.isArray(val))
            val = JSON.stringify(val);
        const key = ':' + this.i++;
        this.values[key.substring(1)] = val;
        return key;
    }
}
class KnexBridgeToSQLCommand extends KnexCommandHelper {
    source;
    constructor(source) {
        super();
        this.source = source;
    }
    values = {};
    i = 0;
    addParameterAndReturnSqlToken(val) {
        return this.param(val);
    }
    param(val) {
        if (Array.isArray(val))
            val = JSON.stringify(val);
        const key = ':' + this.i++;
        this.values[key.substring(1)] = val;
        return key;
    }
    async execute(sql) {
        return await this.source.raw(sql, this.values).then((r) => {
            switch (this.source.client.config.client) {
                case 'mysql':
                case 'mysql2':
                    return new KnexPostgresBridgeToSQLQueryResult({
                        fields: r[1],
                        rows: r[0],
                    });
                case 'pg':
                    return new KnexPostgresBridgeToSQLQueryResult(r);
                default:
                case 'better-sqlite3':
                case 'mssql':
                    return new KnexPostgresBridgeToSQLQueryResult({
                        rows: r,
                    });
            }
        });
    }
}
class KnexPostgresBridgeToSQLQueryResult {
    r;
    getColumnKeyInResultForIndexInSelect(index) {
        if (this.r.fields)
            return this.r.fields[index].name;
        if (this.rows.length == 0)
            throw Error('No rows');
        let i = 0;
        for (let m in this.rows[0]) {
            if (i++ == index)
                return m;
        }
        throw Error('index not found');
    }
    constructor(r) {
        this.r = r;
        this.rows = r.rows;
    }
    rows;
}
