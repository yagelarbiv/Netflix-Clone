"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JobsInQueueEntity = exports.RouteImplementation = exports.EntityQueueStorage = exports.RemultServerImplementation = exports.createRemultServerCore = void 0;
var tslib_1 = require("tslib");
var SseSubscriptionServer_js_1 = require("../SseSubscriptionServer.js");
var context_js_1 = require("../src/context.js");
var data_api_js_1 = require("../src/data-api.js");
var SubscriptionChannel_js_1 = require("../src/live-query/SubscriptionChannel.js");
var SubscriptionServer_js_1 = require("../src/live-query/SubscriptionServer.js");
var IdEntity_js_1 = require("../src/remult3/IdEntity.js");
var Fields_js_1 = require("../src/remult3/Fields.js");
var entity_js_1 = require("../src/remult3/entity.js");
var getEntityRef_js_1 = require("../src/remult3/getEntityRef.js");
var server_action_js_1 = require("../src/server-action.js");
var server_action_info_js_1 = require("../src/server-action-info.js");
var remult_static_js_1 = require("../src/remult-static.js");
var remult_admin_js_1 = tslib_1.__importDefault(require("./remult-admin.js"));
var isOfType_js_1 = require("../src/isOfType.js");
var initDataProviderOrJson_js_1 = require("./initDataProviderOrJson.js");
function createRemultServerCore(options, serverCoreOptions) {
    if (!options) {
        options = {};
    }
    if (!options.subscriptionServer) {
        options.subscriptionServer = new SseSubscriptionServer_js_1.SseSubscriptionServer();
    }
    if (options.logApiEndPoints === undefined)
        options.logApiEndPoints = true;
    remult_static_js_1.remultStatic.actionInfo.runningOnServer = true;
    if (options.defaultGetLimit) {
        data_api_js_1.DataApi.defaultGetLimit = options.defaultGetLimit;
    }
    if (!options.queueStorage) {
        options.queueStorage = new InMemoryQueueStorage();
    }
    var dataProvider = (0, initDataProviderOrJson_js_1.initDataProviderOrJson)(options.dataProvider);
    remult_static_js_1.remultStatic.defaultDataProvider = function () { return dataProvider; };
    if (options.ensureSchema === undefined)
        options.ensureSchema = true;
    context_js_1.RemultAsyncLocalStorage.enable();
    {
        var allControllers = [];
        if (!options.entities)
            options.entities = tslib_1.__spreadArray([], tslib_1.__read(remult_static_js_1.remultStatic.allEntities), false);
        if (options.entities)
            allControllers.push.apply(allControllers, tslib_1.__spreadArray([], tslib_1.__read(options.entities), false));
        if (options.controllers)
            allControllers.push.apply(allControllers, tslib_1.__spreadArray([], tslib_1.__read(options.controllers), false));
        options.controllers = allControllers;
    }
    if (options.rootPath === undefined)
        options.rootPath = '/api';
    remult_static_js_1.remultStatic.actionInfo.runningOnServer = true;
    var bridge = new RemultServerImplementation(new inProcessQueueHandler(options.queueStorage), options, dataProvider, serverCoreOptions);
    return bridge;
}
exports.createRemultServerCore = createRemultServerCore;
/* @internal*/
var RemultServerImplementation = /** @class */ (function () {
    function RemultServerImplementation(queue, options, dataProvider, coreOptions) {
        var _this = this;
        this.queue = queue;
        this.options = options;
        this.dataProvider = dataProvider;
        this.coreOptions = coreOptions;
        this.liveQueryStorage = new SubscriptionServer_js_1.InMemoryLiveQueryStorage();
        this.runWithSerializedJsonContextData = function (jsonContextData, entityKey, what) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var _loop_1, this_1, _a, _b, e, state_1, e_1_1;
            var e_1, _c;
            var _this = this;
            return tslib_1.__generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _loop_1 = function (e) {
                            var key;
                            return tslib_1.__generator(this, function (_e) {
                                switch (_e.label) {
                                    case 0:
                                        key = (0, getEntityRef_js_1.getEntityKey)(e);
                                        if (!(key === entityKey)) return [3 /*break*/, 2];
                                        return [4 /*yield*/, this_1.runWithRemult(function (remult) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                                                return tslib_1.__generator(this, function (_a) {
                                                    switch (_a.label) {
                                                        case 0:
                                                            remult.user = jsonContextData.user;
                                                            if (!this.options.contextSerializer) return [3 /*break*/, 2];
                                                            return [4 /*yield*/, this.options.contextSerializer.deserialize(jsonContextData.context, {
                                                                    remult: remult,
                                                                    get liveQueryStorage() {
                                                                        return remult.liveQueryStorage;
                                                                    },
                                                                    set liveQueryStorage(value) {
                                                                        remult.liveQueryStorage = value;
                                                                    },
                                                                })];
                                                        case 1:
                                                            _a.sent();
                                                            _a.label = 2;
                                                        case 2: return [4 /*yield*/, what(remult.repo(e))];
                                                        case 3:
                                                            _a.sent();
                                                            return [2 /*return*/];
                                                    }
                                                });
                                            }); })];
                                    case 1:
                                        _e.sent();
                                        return [2 /*return*/, { value: void 0 }];
                                    case 2: return [2 /*return*/];
                                }
                            });
                        };
                        this_1 = this;
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 6, 7, 8]);
                        _a = tslib_1.__values(this.options.entities), _b = _a.next();
                        _d.label = 2;
                    case 2:
                        if (!!_b.done) return [3 /*break*/, 5];
                        e = _b.value;
                        return [5 /*yield**/, _loop_1(e)];
                    case 3:
                        state_1 = _d.sent();
                        if (typeof state_1 === "object")
                            return [2 /*return*/, state_1.value];
                        _d.label = 4;
                    case 4:
                        _b = _a.next();
                        return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        e_1_1 = _d.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 8];
                    case 7:
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 8: throw new Error("Couldn't find entity " + entityKey);
                }
            });
        }); };
        this.withRemult = function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.process(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                            return tslib_1.__generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, next()];
                                    case 1:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); })(req, res)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); };
        this.registeredRouter = false;
        this.hasQueue = false;
        /* internal */
        this.backendMethodsOpenApi = [];
        if (options.liveQueryStorage)
            this.liveQueryStorage = options.liveQueryStorage;
        if (options.subscriptionServer)
            this.subscriptionServer = options.subscriptionServer;
        var entitiesMetaData = [];
        this.dataProvider = dataProvider.then(function (dp) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.runWithRemult(function (remult) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                            var started_1, startConsoleLog, _a, _b, item, e_2_1;
                            var e_2, _c;
                            return tslib_1.__generator(this, function (_d) {
                                switch (_d.label) {
                                    case 0:
                                        remult.dataProvider = dp;
                                        if (!options.ensureSchema) return [3 /*break*/, 10];
                                        started_1 = false;
                                        startConsoleLog = function () {
                                            if (started_1)
                                                return;
                                            started_1 = true;
                                            console.time('Schema ensured');
                                        };
                                        entitiesMetaData.push.apply(entitiesMetaData, tslib_1.__spreadArray([], tslib_1.__read(options.entities.map(function (e) { return remult.repo(e).metadata; })), false));
                                        if (!dp.ensureSchema) return [3 /*break*/, 2];
                                        startConsoleLog();
                                        return [4 /*yield*/, dp.ensureSchema(entitiesMetaData)];
                                    case 1:
                                        _d.sent();
                                        _d.label = 2;
                                    case 2:
                                        _d.trys.push([2, 7, 8, 9]);
                                        _a = tslib_1.__values([
                                            options.liveQueryStorage,
                                            options.queueStorage,
                                        ]), _b = _a.next();
                                        _d.label = 3;
                                    case 3:
                                        if (!!_b.done) return [3 /*break*/, 6];
                                        item = _b.value;
                                        if (!(item === null || item === void 0 ? void 0 : item.ensureSchema)) return [3 /*break*/, 5];
                                        startConsoleLog();
                                        return [4 /*yield*/, item.ensureSchema()];
                                    case 4:
                                        _d.sent();
                                        _d.label = 5;
                                    case 5:
                                        _b = _a.next();
                                        return [3 /*break*/, 3];
                                    case 6: return [3 /*break*/, 9];
                                    case 7:
                                        e_2_1 = _d.sent();
                                        e_2 = { error: e_2_1 };
                                        return [3 /*break*/, 9];
                                    case 8:
                                        try {
                                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                                        }
                                        finally { if (e_2) throw e_2.error; }
                                        return [7 /*endfinally*/];
                                    case 9:
                                        if (started_1)
                                            console.timeEnd('Schema ensured');
                                        _d.label = 10;
                                    case 10:
                                        if (!options.initApi) return [3 /*break*/, 12];
                                        return [4 /*yield*/, options.initApi(remult)];
                                    case 11:
                                        _d.sent();
                                        _d.label = 12;
                                    case 12: return [2 /*return*/];
                                }
                            });
                        }); }, { skipDataProvider: true })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, dp];
                }
            });
        }); });
    }
    RemultServerImplementation.prototype.withRemultAsync = function (request, what) {
        var _this = this;
        if (!request)
            return this.runWithRemult(what);
        return new Promise(function (resolve, error) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var err_1;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.withRemult(request, undefined, function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                                return tslib_1.__generator(this, function (_a) {
                                    try {
                                        what().then(resolve).catch(error);
                                    }
                                    catch (err) {
                                        error(err);
                                    }
                                    return [2 /*return*/];
                                });
                            }); })];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        err_1 = _a.sent();
                        error(err_1);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        }); });
    };
    RemultServerImplementation.prototype.getEntities = function () {
        //TODO V2 - consider using entitiesMetaData - but it may require making it all awaitable
        var r = new context_js_1.Remult();
        return this.options.entities.map(function (x) { return r.repo(x).metadata; });
    };
    RemultServerImplementation.prototype.getRouteImpl = function () {
        if (!this.routeImpl) {
            this.routeImpl = new RouteImplementation(this.coreOptions);
            this.registerRouter(this.routeImpl);
        }
        return this.routeImpl;
    };
    RemultServerImplementation.prototype.handle = function (req, gRes) {
        return this.getRouteImpl().handle(req, gRes);
    };
    RemultServerImplementation.prototype.registerRouter = function (r) {
        var e_3, _a, e_4, _b;
        var _this = this;
        if (this.registeredRouter)
            throw 'Router already registered';
        this.registeredRouter = true;
        {
            try {
                for (var _c = tslib_1.__values(this.options.controllers), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var c = _d.value;
                    var z = c[server_action_js_1.classBackendMethodsArray];
                    if (z)
                        try {
                            for (var z_1 = (e_4 = void 0, tslib_1.__values(z)), z_1_1 = z_1.next(); !z_1_1.done; z_1_1 = z_1.next()) {
                                var a = z_1_1.value;
                                var x = a[server_action_info_js_1.serverActionField];
                                if (!x) {
                                    throw 'failed to set server action, did you forget the BackendMethod Decorator?';
                                }
                                this.addAction(x, r);
                            }
                        }
                        catch (e_4_1) { e_4 = { error: e_4_1 }; }
                        finally {
                            try {
                                if (z_1_1 && !z_1_1.done && (_b = z_1.return)) _b.call(z_1);
                            }
                            finally { if (e_4) throw e_4.error; }
                        }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_3) throw e_3.error; }
            }
            if (this.hasQueue)
                this.addAction({
                    __register: function (x) {
                        x(server_action_js_1.Action.apiUrlForJobStatus, false, function () { return true; }, function (data, req, res) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                            var job, userId;
                            return tslib_1.__generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, this.queue.getJobInfo(data.queuedJobId)];
                                    case 1:
                                        job = _a.sent();
                                        userId = undefined;
                                        if (req === null || req === void 0 ? void 0 : req.user)
                                            userId = req.user.id;
                                        if (job.userId == '')
                                            job.userId = undefined;
                                        if (userId != job.userId)
                                            res.forbidden();
                                        else
                                            res.success(job.info);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                    },
                    doWork: undefined,
                }, r);
            if (this.options.admin !== undefined && this.options.admin !== false) {
                var admin = this.process(function (remult, req, res, orig, origResponse) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                    return tslib_1.__generator(this, function (_a) {
                        if (remult.isAllowed(this.options.admin))
                            origResponse.send((0, remult_admin_js_1.default)({
                                remult: remult,
                                entities: this.options.entities,
                                baseUrl: this.options.rootPath + '/admin',
                            }));
                        else
                            res.notFound();
                        return [2 /*return*/];
                    });
                }); });
                r.route(this.options.rootPath + '/admin/:id').get(admin);
                r.route(this.options.rootPath + '/admin/').get(admin);
                r.route(this.options.rootPath + '/admin').get(admin);
            }
            if (this.options.subscriptionServer instanceof SseSubscriptionServer_js_1.SseSubscriptionServer) {
                var streamPath = this.options.rootPath + '/' + SubscriptionChannel_js_1.streamUrl;
                r.route(streamPath).get(this.process(function (remult, req, res, origReq, origRes) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                    return tslib_1.__generator(this, function (_a) {
                        ;
                        remult.subscriptionServer.openHttpServerStream(origReq, origRes);
                        return [2 /*return*/];
                    });
                }); }));
                r.route(streamPath + '/subscribe').post(this.process(function (remult, req, res, reqInfo, origRes, origReq) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                    var body, _a, _b;
                    return tslib_1.__generator(this, function (_c) {
                        switch (_c.label) {
                            case 0:
                                _b = (_a = remult.subscriptionServer).subscribeToChannel;
                                return [4 /*yield*/, this.coreOptions.getRequestBody(origReq)];
                            case 1:
                                body = _b.apply(_a, [_c.sent(), res,
                                    remult]);
                                return [2 /*return*/];
                        }
                    });
                }); }));
                r.route(streamPath + '/unsubscribe').post(this.process(function (remult, req, res, reqInfo, origRes, origReq) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                    var _a, _b;
                    return tslib_1.__generator(this, function (_c) {
                        switch (_c.label) {
                            case 0:
                                ;
                                _b = (_a = remult.subscriptionServer).subscribeToChannel;
                                return [4 /*yield*/, this.coreOptions.getRequestBody(origReq)];
                            case 1:
                                _b.apply(_a, [_c.sent(), res,
                                    remult,
                                    true]);
                                return [2 /*return*/];
                        }
                    });
                }); }));
            }
            r.route(this.options.rootPath + '/' + SubscriptionChannel_js_1.liveQueryKeepAliveRoute).post(this.process(function (remult, req, res, reqInfo, origRes, origReq) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                var _a, _b, _c, _d;
                return tslib_1.__generator(this, function (_e) {
                    switch (_e.label) {
                        case 0:
                            _b = (_a = res).success;
                            _d = (_c = remult.liveQueryStorage).keepAliveAndReturnUnknownQueryIds;
                            return [4 /*yield*/, this.coreOptions.getRequestBody(origReq)];
                        case 1: return [4 /*yield*/, _d.apply(_c, [_e.sent()])];
                        case 2:
                            _b.apply(_a, [_e.sent()]);
                            return [2 /*return*/];
                    }
                });
            }); }));
        }
        this.options.entities.forEach(function (e) {
            var key = (0, getEntityRef_js_1.getEntityKey)(e);
            if (key != undefined)
                _this.add(key, function (c) {
                    return new data_api_js_1.DataApi(c.repo(e), c);
                }, r);
        });
    };
    RemultServerImplementation.prototype.serializeContext = function (remult) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var result, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        result = {
                            user: remult.user,
                            context: undefined,
                        };
                        if (!this.options.contextSerializer) return [3 /*break*/, 2];
                        _a = result;
                        return [4 /*yield*/, this.options.contextSerializer.serialize(remult)];
                    case 1:
                        _a.context = _b.sent();
                        _b.label = 2;
                    case 2: return [2 /*return*/, result];
                }
            });
        });
    };
    RemultServerImplementation.prototype.add = function (key, dataApiFactory, r) {
        var _this = this;
        var myRoute = this.options.rootPath + '/' + key;
        if (this.options.logApiEndPoints)
            console.info('[remult] ' + myRoute);
        r.route(myRoute)
            .get(this.process(function (c, req, res, orig) {
            return dataApiFactory(c).httpGet(res, req, function () { return _this.serializeContext(c); });
        }))
            .put(this.process(function (c, req, res, _, __, orig) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var _a, _b, _c;
            return tslib_1.__generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _b = (_a = dataApiFactory(c)).updateManyThroughPutRequest;
                        _c = [res,
                            req];
                        return [4 /*yield*/, this.coreOptions.getRequestBody(orig)];
                    case 1: return [2 /*return*/, _b.apply(_a, _c.concat([_d.sent()]))];
                }
            });
        }); }))
            .delete(this.process(function (c, req, res, _, __, orig) { return tslib_1.__awaiter(_this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, dataApiFactory(c).deleteMany(res, req, undefined)];
        }); }); }))
            .post(this.process(function (c, req, res, _, __, orig) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var _a, _b, _c;
            var _this = this;
            return tslib_1.__generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _b = (_a = dataApiFactory(c)).httpPost;
                        _c = [res,
                            req];
                        return [4 /*yield*/, this.coreOptions.getRequestBody(orig)];
                    case 1: return [2 /*return*/, _b.apply(_a, _c.concat([_d.sent(), function () { return _this.serializeContext(c); }]))];
                }
            });
        }); }));
        r.route(myRoute + '/:id')
            //@ts-ignore
            .get(this.process(function (c, req, res, orig) { return tslib_1.__awaiter(_this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, dataApiFactory(c).get(res, orig.params.id)];
        }); }); }))
            //@ts-ignore
            .put(this.process(function (c, req, res, reqInfo, _, orig) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var _a, _b, _c;
            return tslib_1.__generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _b = (_a = dataApiFactory(c)).put;
                        _c = [res,
                            reqInfo.params.id];
                        return [4 /*yield*/, this.coreOptions.getRequestBody(orig)];
                    case 1: return [2 /*return*/, _b.apply(_a, _c.concat([_d.sent()]))];
                }
            });
        }); }))
            //@ts-ignore
            .delete(this.process(function (c, req, res, orig) { return tslib_1.__awaiter(_this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, dataApiFactory(c).delete(res, orig.params.id)];
        }); }); }));
    };
    //runs with remult but without init request
    RemultServerImplementation.prototype.runWithRemult = function (what, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var dataProvider;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!(options === null || options === void 0 ? void 0 : options.skipDataProvider)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.dataProvider];
                    case 1:
                        dataProvider = _a.sent();
                        _a.label = 2;
                    case 2: return [4 /*yield*/, (0, context_js_1.withRemult)(function (remult) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                            var x;
                            return tslib_1.__generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        x = remult;
                                        x.liveQueryPublisher = new SubscriptionServer_js_1.LiveQueryPublisher(function () { return remult.subscriptionServer; }, function () { return remult.liveQueryStorage; }, this.runWithSerializedJsonContextData);
                                        if (!(options === null || options === void 0 ? void 0 : options.skipDataProvider))
                                            x.dataProvider = dataProvider;
                                        x.subscriptionServer = this.subscriptionServer;
                                        x.liveQueryStorage = this.liveQueryStorage;
                                        return [4 /*yield*/, what(x)];
                                    case 1: return [2 /*return*/, _a.sent()];
                                }
                            });
                        }); }, {
                            dataProvider: dataProvider,
                        })];
                    case 3: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    RemultServerImplementation.prototype.process = function (what) {
        var _this = this;
        return function (req, origRes) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var genReq, myReq, myRes, err_2;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        genReq = req
                            ? this.coreOptions.buildGenericRequestInfo(req)
                            : undefined;
                        if (req) {
                            if (!genReq.query) {
                                genReq.query = req['_tempQuery'];
                            }
                            if (!genReq.params)
                                genReq.params = req['_tempParams'];
                        }
                        myReq = new RequestBridgeToDataApiRequest(genReq);
                        myRes = new ResponseBridgeToDataApiResponse(origRes, req, this.options.error);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 6, , 7]);
                        if (!remult_static_js_1.remultStatic.asyncContext.isInInitRequest()) return [3 /*break*/, 3];
                        return [4 /*yield*/, what(remult_static_js_1.remultStatic.asyncContext.getStore().remult, myReq, myRes, genReq, origRes, req)];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3: return [4 /*yield*/, this.runWithRemult(function (remult) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                            var user;
                            return tslib_1.__generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        if (!req) return [3 /*break*/, 8];
                                        remult_static_js_1.remultStatic.asyncContext.setInInitRequest(true);
                                        _a.label = 1;
                                    case 1:
                                        _a.trys.push([1, , 7, 8]);
                                        user = void 0;
                                        if (!this.options.getUser) return [3 /*break*/, 3];
                                        return [4 /*yield*/, this.options.getUser(req)];
                                    case 2:
                                        user = _a.sent();
                                        return [3 /*break*/, 4];
                                    case 3:
                                        user = req['user'];
                                        if (!user)
                                            user = req['auth'];
                                        _a.label = 4;
                                    case 4:
                                        if (user)
                                            remult.user = user;
                                        if (!this.options.initRequest) return [3 /*break*/, 6];
                                        return [4 /*yield*/, this.options.initRequest(req, {
                                                remult: remult,
                                                get liveQueryStorage() {
                                                    return remult.liveQueryStorage;
                                                },
                                                set liveQueryStorage(value) {
                                                    remult.liveQueryStorage = value;
                                                },
                                            })];
                                    case 5:
                                        _a.sent();
                                        _a.label = 6;
                                    case 6: return [3 /*break*/, 8];
                                    case 7:
                                        remult_static_js_1.remultStatic.asyncContext.setInInitRequest(false);
                                        return [7 /*endfinally*/];
                                    case 8: return [4 /*yield*/, what(remult, myReq, myRes, genReq, origRes, req)];
                                    case 9:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); })];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5: return [3 /*break*/, 7];
                    case 6:
                        err_2 = _a.sent();
                        if (origRes)
                            myRes.error(err_2, undefined);
                        else
                            throw err_2;
                        return [3 /*break*/, 7];
                    case 7: return [2 /*return*/];
                }
            });
        }); };
    };
    RemultServerImplementation.prototype.getRemult = function (req) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var remult;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!req) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.runWithRemult(function (c) { return tslib_1.__awaiter(_this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
                                return [2 /*return*/, (remult = c)];
                            }); }); })];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2: return [4 /*yield*/, this.process(function (c) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                            return tslib_1.__generator(this, function (_a) {
                                remult = c;
                                return [2 /*return*/];
                            });
                        }); })(req, undefined)];
                    case 3:
                        _a.sent();
                        return [2 /*return*/, remult];
                }
            });
        });
    };
    RemultServerImplementation.prototype.addAction = function (action, r) {
        var _this = this;
        action.__register(function (url, queue, allowed, what) {
            var myUrl = _this.options.rootPath + '/' + url;
            var tag = (function () {
                var split = url.split('/');
                if (split.length == 1)
                    return 'Static Backend Methods';
                else
                    return split[0];
            })();
            _this.backendMethodsOpenApi.push({ path: myUrl, allowed: allowed, tag: tag });
            if (_this.options.logApiEndPoints)
                console.info('[remult] ' + myUrl);
            if (queue) {
                _this.hasQueue = true;
                _this.queue.mapQueuedAction(myUrl, what);
            }
            r.route(myUrl).post(_this.process(function (remult, req, res, _, __, orig) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                var r_1, _a, _b, _c, _d;
                var _e;
                return tslib_1.__generator(this, function (_f) {
                    switch (_f.label) {
                        case 0:
                            if (!queue) return [3 /*break*/, 3];
                            _e = {};
                            _b = (_a = this.queue).submitJob;
                            _c = [myUrl,
                                remult];
                            return [4 /*yield*/, this.coreOptions.getRequestBody(orig)];
                        case 1: return [4 /*yield*/, _b.apply(_a, _c.concat([_f.sent()]))];
                        case 2:
                            r_1 = (_e.queuedJobId = _f.sent(),
                                _e);
                            res.success(r_1);
                            return [3 /*break*/, 5];
                        case 3:
                            _d = what;
                            return [4 /*yield*/, this.coreOptions.getRequestBody(orig)];
                        case 4: return [2 /*return*/, _d.apply(void 0, [_f.sent(), remult,
                                res])];
                        case 5: return [2 /*return*/];
                    }
                });
            }); }));
        });
    };
    RemultServerImplementation.prototype.openApiDoc = function (options) {
        var e_5, _a, e_6, _b;
        if (!options.version)
            options.version = '1.0.0';
        var spec = {
            info: { title: options.title, version: options.version },
            openapi: '3.0.0',
            //swagger: "2.0",
            components: {
                schemas: {},
                securitySchemes: {
                    bearerAuth: {
                        scheme: 'bearer',
                        bearerFormat: 'JWT',
                        type: 'http',
                    },
                },
            },
            paths: {},
        };
        var validationError = {
            '400': {
                description: 'Error: Bad Request',
                content: {
                    'application/json': {
                        schema: {
                            $ref: '#/components/schemas/InvalidResponse',
                        },
                    },
                },
            },
        };
        var security = {
            security: [
                {
                    bearerAuth: [],
                },
            ],
        };
        var secureBase = function (condition, def, item) {
            if (condition === undefined)
                condition = def;
            if (condition != false) {
                if (condition != true) {
                    item = tslib_1.__assign(tslib_1.__assign({}, item), security);
                    item.responses['403'] = { description: 'forbidden' };
                }
                return item;
            }
        };
        var _loop_2 = function (meta) {
            var e_7, _g;
            var key = meta.key;
            var parameters = [];
            if (key) {
                var mutationKey = key;
                var properties = {};
                var mutationProperties = {};
                try {
                    for (var _h = (e_7 = void 0, tslib_1.__values(meta.fields)), _j = _h.next(); !_j.done; _j = _h.next()) {
                        var f = _j.value;
                        var type = f.valueType == String
                            ? 'string'
                            : f.valueType == Boolean
                                ? 'boolean'
                                : f.valueType == Date
                                    ? 'string'
                                    : f.valueType == Number
                                        ? 'number'
                                        : 'object';
                        if (f.options.includeInApi !== false) {
                            properties[f.key] = {
                                type: type,
                            };
                            if (f.options.allowApiUpdate !== false) {
                                mutationProperties[f.key] = {
                                    type: type,
                                };
                            }
                            parameters.push({
                                name: f.key,
                                in: 'query',
                                description: 'filter equal to ' +
                                    f.key +
                                    '. See [more filtering options](https://remult.dev/docs/rest-api.html#filter)',
                                required: false,
                                style: 'simple',
                                type: type,
                            });
                        }
                    }
                }
                catch (e_7_1) { e_7 = { error: e_7_1 }; }
                finally {
                    try {
                        if (_j && !_j.done && (_g = _h.return)) _g.call(_h);
                    }
                    finally { if (e_7) throw e_7.error; }
                }
                spec.components.schemas[key] = {
                    type: 'object',
                    properties: properties,
                };
                if (JSON.stringify(properties) !== JSON.stringify(mutationProperties)) {
                    mutationKey += 'Mutation';
                    spec.components.schemas[mutationKey] = {
                        type: 'object',
                        properties: mutationProperties,
                    };
                }
                var definition = {
                    $ref: '#/components/schemas/' + key,
                };
                var secure = function (condition, def, item) {
                    item.tags = [meta.key];
                    if (condition === undefined)
                        condition = meta.options.allowApiCrud;
                    return secureBase(condition, def, item);
                };
                var apiPath = (spec.paths[this_2.options.rootPath + '/' + key] = {});
                var itemInBody = {
                    requestBody: {
                        content: {
                            'application/json': {
                                schema: {
                                    $ref: '#/components/schemas/' + mutationKey,
                                },
                            },
                        },
                    },
                };
                var apiPathWithId = (spec.paths[this_2.options.rootPath + '/' + key + '/{id}'] = {});
                //https://github.com/2fd/open-api.d.ts
                apiPath.get = secure(meta.options.allowApiRead, true, {
                    description: 'return an array of ' +
                        key +
                        '. supports filter operators. For more info on filtering [see this article](https://remult.dev/docs/rest-api.html#filter)',
                    parameters: tslib_1.__spreadArray([
                        {
                            name: '_limit',
                            in: 'query',
                            description: 'limit the number of returned rows, default 100',
                            required: false,
                            style: 'simple',
                            schema: { type: 'integer' },
                        },
                        {
                            name: '_page',
                            in: 'query',
                            description: 'to be used for paging',
                            required: false,
                            schema: { type: 'integer' },
                        },
                        {
                            name: '_sort',
                            in: 'query',
                            description: 'the columns to sort on',
                            required: false,
                            schema: { type: 'string' },
                        },
                        {
                            name: '_order',
                            in: 'query',
                            description: 'the sort order to user for the columns in `_sort`',
                            required: false,
                            schema: { type: 'string' },
                        }
                    ], tslib_1.__read(parameters), false),
                    responses: {
                        '200': {
                            description: 'returns an array of ' + key,
                            content: {
                                'application/json': {
                                    schema: {
                                        type: 'array',
                                        items: definition,
                                    },
                                },
                            },
                        },
                    },
                });
                apiPath.delete = secure(meta.options.allowApiDelete, true, {
                    description: 'deletes row of ' +
                        key +
                        '. supports filter operators. For more info on filtering [see this article](https://remult.dev/docs/rest-api.html#filter)',
                    parameters: tslib_1.__spreadArray([], tslib_1.__read(parameters), false),
                    responses: {
                        '400': {
                            description: 'Error: Bad Request',
                            content: {
                                'application/json': {
                                    schema: {
                                        $ref: '#/components/schemas/InvalidResponse',
                                    },
                                },
                            },
                        },
                        '200': {
                            description: 'returns the number of deleted rows ' + key,
                            content: {
                                'application/json': {
                                    schema: {
                                        type: 'object',
                                        properties: {
                                            deleted: {
                                                type: 'number',
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    },
                });
                apiPath.put = secure(meta.options.allowApiDelete, true, tslib_1.__assign(tslib_1.__assign({ description: 'updates row of ' +
                        key +
                        '. supports filter operators. For more info on filtering [see this article](https://remult.dev/docs/rest-api.html#filter)', parameters: tslib_1.__spreadArray([], tslib_1.__read(parameters), false) }, itemInBody), { responses: {
                        '400': {
                            description: 'Error: Bad Request',
                            content: {
                                'application/json': {
                                    schema: {
                                        $ref: '#/components/schemas/InvalidResponse',
                                    },
                                },
                            },
                        },
                        '200': {
                            description: 'returns the number of updated rows ' + key,
                            content: {
                                'application/json': {
                                    schema: {
                                        type: 'object',
                                        properties: {
                                            updated: {
                                                type: 'number',
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    } }));
                var idParameter = {
                    name: 'id',
                    in: 'path',
                    description: 'id of ' + key,
                    required: true,
                    schema: { type: 'string' },
                };
                apiPath.post = secure(meta.options.allowApiInsert, false, tslib_1.__assign(tslib_1.__assign({ 
                    //"summary": "insert a " + key,
                    //"description": "insert a " + key,
                    produces: ['application/json'] }, itemInBody), { responses: tslib_1.__assign({ '201': {
                            description: 'Created',
                            content: {
                                'application/json': {
                                    schema: {
                                        $ref: '#/components/schemas/' + key,
                                    },
                                },
                            },
                        } }, validationError) }));
                apiPathWithId.get = secure(meta.options.allowApiRead, true, {
                    parameters: [idParameter],
                    responses: {
                        '200': {
                            // "description": "returns an item of " + key,
                            content: {
                                'application/json': {
                                    schema: {
                                        $ref: '#/components/schemas/' + key,
                                    },
                                },
                            },
                        },
                    },
                });
                apiPathWithId.put = secure(meta.options.allowApiUpdate, false, tslib_1.__assign(tslib_1.__assign({ 
                    //"summary": "Update a " + key,
                    //"description": "Update a " + key,
                    produces: ['application/json'], parameters: [idParameter] }, itemInBody), { responses: tslib_1.__assign({ '200': {
                            description: 'successful operation',
                            content: {
                                'application/json': {
                                    schema: {
                                        $ref: '#/components/schemas/' + key,
                                    },
                                },
                            },
                        } }, validationError) }));
                apiPathWithId.delete = secure(meta.options.allowApiDelete, false, {
                    //      "summary": "Delete a " + key,
                    //      "description": "Delete a " + key,
                    produces: ['application/json'],
                    parameters: [idParameter],
                    responses: tslib_1.__assign({ '204': {
                            description: 'Deleted',
                        } }, validationError),
                });
            }
        };
        var this_2 = this;
        try {
            for (var _c = tslib_1.__values(this.getEntities()), _d = _c.next(); !_d.done; _d = _c.next()) {
                var meta = _d.value;
                _loop_2(meta);
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_5) throw e_5.error; }
        }
        try {
            for (var _e = tslib_1.__values(this.backendMethodsOpenApi), _f = _e.next(); !_f.done; _f = _e.next()) {
                var b = _f.value;
                spec.paths[b.path] = {
                    post: secureBase(b.allowed, false, {
                        produces: ['application/json'],
                        tags: [b.tag],
                        requestBody: {
                            content: {
                                'application/json': {
                                    schema: {
                                        type: 'object',
                                        properties: {
                                            args: {
                                                type: 'array',
                                                items: { type: 'string' },
                                            },
                                        },
                                    },
                                },
                            },
                        },
                        responses: tslib_1.__assign({ '201': {
                                description: 'Created',
                                content: {
                                    'application/json': {
                                        schema: {
                                            type: 'object',
                                            properties: {
                                                data: {
                                                    type: 'object',
                                                },
                                            },
                                        },
                                    },
                                },
                            } }, validationError),
                    }),
                };
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
            }
            finally { if (e_6) throw e_6.error; }
        }
        spec.components.schemas['InvalidResponse'] = {
            type: 'object',
            properties: {
                message: {
                    type: 'string',
                },
                modelState: {
                    type: 'object',
                },
            },
        };
        return spec;
    };
    return RemultServerImplementation;
}());
exports.RemultServerImplementation = RemultServerImplementation;
var RequestBridgeToDataApiRequest = /** @class */ (function () {
    function RequestBridgeToDataApiRequest(r) {
        this.r = r;
    }
    RequestBridgeToDataApiRequest.prototype.get = function (key) {
        var _a;
        return (_a = this.r) === null || _a === void 0 ? void 0 : _a.query[key];
    };
    return RequestBridgeToDataApiRequest;
}());
var ResponseBridgeToDataApiResponse = /** @class */ (function () {
    function ResponseBridgeToDataApiResponse(r, req, handleError) {
        this.r = r;
        this.req = req;
        this.handleError = handleError;
    }
    ResponseBridgeToDataApiResponse.prototype.forbidden = function () {
        this.error({ message: 'Forbidden' }, undefined, 403);
    };
    ResponseBridgeToDataApiResponse.prototype.setStatus = function (status) {
        return this.r.status(status);
    };
    ResponseBridgeToDataApiResponse.prototype.progress = function (progress) { };
    ResponseBridgeToDataApiResponse.prototype.success = function (data) {
        this.r.json(data);
    };
    ResponseBridgeToDataApiResponse.prototype.created = function (data) {
        this.setStatus(201).json(data);
    };
    ResponseBridgeToDataApiResponse.prototype.deleted = function () {
        this.setStatus(204).end();
    };
    ResponseBridgeToDataApiResponse.prototype.notFound = function () {
        this.error({ message: 'NotFound' }, undefined, 404);
    };
    ResponseBridgeToDataApiResponse.prototype.error = function (exception, entity, httpStatusCode) {
        var _a;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var data, responseSent, sendError;
            var _this = this;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        data = (0, data_api_js_1.serializeError)(exception);
                        if (!httpStatusCode) {
                            if (data.httpStatusCode) {
                                httpStatusCode = data.httpStatusCode;
                            }
                            else if ((0, isOfType_js_1.isOfType)(exception, 'isForbiddenError') &&
                                exception.isForbiddenError) {
                                httpStatusCode = 403;
                            }
                            else if (data.modelState) {
                                httpStatusCode = 400;
                            }
                            else {
                                httpStatusCode = 500;
                            }
                        }
                        responseSent = false;
                        sendError = function (httpStatusCode, body) {
                            var _a, _b, _c;
                            if (responseSent) {
                                throw Error('Error response already sent');
                            }
                            responseSent = true;
                            console.error({
                                message: body.message,
                                httpStatusCode: httpStatusCode,
                                stack: (_a = data.stack) === null || _a === void 0 ? void 0 : _a.split('\n'),
                                url: (_b = _this.req) === null || _b === void 0 ? void 0 : _b.url,
                                method: (_c = _this.req) === null || _c === void 0 ? void 0 : _c.method,
                            });
                            _this.setStatus(httpStatusCode).json(body);
                        };
                        return [4 /*yield*/, ((_a = this.handleError) === null || _a === void 0 ? void 0 : _a.call(this, {
                                httpStatusCode: httpStatusCode,
                                req: this.req,
                                entity: entity,
                                exception: exception,
                                responseBody: data,
                                sendError: sendError,
                            }))];
                    case 1:
                        _b.sent();
                        if (!responseSent) {
                            sendError(httpStatusCode, data);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    return ResponseBridgeToDataApiResponse;
}());
var inProcessQueueHandler = /** @class */ (function () {
    function inProcessQueueHandler(storage) {
        this.storage = storage;
        this.actions = new Map();
    }
    inProcessQueueHandler.prototype.submitJob = function (url, req, body) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var id, job;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.storage.createJob(url, req.user ? req.user.id : undefined)];
                    case 1:
                        id = _a.sent();
                        return [4 /*yield*/, this.storage.getJobInfo(id)];
                    case 2:
                        job = _a.sent();
                        this.actions.get(url)(body, req, {
                            error: function (error) { return job.setErrorResult((0, data_api_js_1.serializeError)(error)); },
                            success: function (result) { return job.setResult(result); },
                            progress: function (progress) { return job.setProgress(progress); },
                            created: function () {
                                throw Error('Created response not expected for queue');
                            },
                            deleted: function () {
                                throw Error('deleted response not expected for queue');
                            },
                            notFound: function () {
                                throw Error('notFound response not expected for queue');
                            },
                            forbidden: function () { return job.setErrorResult('Forbidden'); },
                        });
                        return [2 /*return*/, id];
                }
            });
        });
    };
    inProcessQueueHandler.prototype.mapQueuedAction = function (url, what) {
        this.actions.set(url, what);
    };
    inProcessQueueHandler.prototype.getJobInfo = function (queuedJobId) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.storage.getJobInfo(queuedJobId)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return inProcessQueueHandler;
}());
var InMemoryQueueStorage = /** @class */ (function () {
    function InMemoryQueueStorage() {
        this.jobs = new Map();
    }
    InMemoryQueueStorage.prototype.getJobInfo = function (queuedJobId) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this.jobs.get(queuedJobId)];
            });
        });
    };
    InMemoryQueueStorage.prototype.createJob = function (url, userId) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var id;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                id = this.jobs.size.toString();
                this.jobs.set(id, {
                    info: {
                        done: false,
                    },
                    userId: userId,
                    setErrorResult: function (error) {
                        var job = _this.jobs.get(id);
                        job.info.done = true;
                        job.info.error = error;
                    },
                    setResult: function (result) {
                        var job = _this.jobs.get(id);
                        job.info.done = true;
                        job.info.result = result;
                    },
                    setProgress: function (progress) {
                        var job = _this.jobs.get(id);
                        job.info.progress = progress;
                    },
                });
                return [2 /*return*/, id];
            });
        });
    };
    return InMemoryQueueStorage;
}());
var test = 0;
var EntityQueueStorage = /** @class */ (function () {
    function EntityQueueStorage(repo) {
        this.repo = repo;
        this.sync = Promise.resolve();
    }
    EntityQueueStorage.prototype.doSync = function (what) {
        return (this.sync = this.sync.then(function () { return what(); }));
    };
    EntityQueueStorage.prototype.getJobInfo = function (queuedJobId) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var q, lastProgress;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.repo.findId(queuedJobId)];
                    case 1:
                        q = _a.sent();
                        lastProgress = undefined;
                        return [2 /*return*/, {
                                userId: q.userId,
                                info: {
                                    done: q.done,
                                    error: q.error ? JSON.parse(q.result) : undefined,
                                    result: q.done && !q.error ? JSON.parse(q.result) : undefined,
                                    progress: q.progress,
                                },
                                setErrorResult: function (error) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                                    return tslib_1.__generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0: return [4 /*yield*/, this.sync];
                                            case 1:
                                                _a.sent();
                                                q.error = true;
                                                q.done = true;
                                                q.result = JSON.stringify(error);
                                                q.doneTime = new Date();
                                                q.progress = 1;
                                                return [4 /*yield*/, this.doSync(function () { return q._.save(); })];
                                            case 2:
                                                _a.sent();
                                                return [2 /*return*/];
                                        }
                                    });
                                }); },
                                setResult: function (result) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                                    return tslib_1.__generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0: return [4 /*yield*/, this.sync];
                                            case 1:
                                                _a.sent();
                                                q.done = true;
                                                q.result = JSON.stringify(result);
                                                q.doneTime = new Date();
                                                return [4 /*yield*/, this.doSync(function () { return q._.save(); })];
                                            case 2:
                                                _a.sent();
                                                return [2 /*return*/];
                                        }
                                    });
                                }); },
                                setProgress: function (progress) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                                    var now;
                                    return tslib_1.__generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0:
                                                if (progress === 0)
                                                    return [2 /*return*/];
                                                now = new Date();
                                                if (lastProgress && now.valueOf() - lastProgress.valueOf() < 200)
                                                    return [2 /*return*/];
                                                lastProgress = new Date();
                                                return [4 /*yield*/, this.sync];
                                            case 1:
                                                _a.sent();
                                                q.progress = progress;
                                                return [4 /*yield*/, this.doSync(function () { return q._.save(); })];
                                            case 2:
                                                _a.sent();
                                                return [2 /*return*/];
                                        }
                                    });
                                }); },
                            }];
                }
            });
        });
    };
    EntityQueueStorage.prototype.createJob = function (url, userId) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var q;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        q = this.repo.create();
                        q.userId = userId;
                        q.submitTime = new Date();
                        q.url = url;
                        return [4 /*yield*/, q._.save()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, q.id];
                }
            });
        });
    };
    return EntityQueueStorage;
}());
exports.EntityQueueStorage = EntityQueueStorage;
var RouteImplementation = /** @class */ (function () {
    function RouteImplementation(coreOptions) {
        this.coreOptions = coreOptions;
        this.map = new Map();
        this.starRoutes = [];
    }
    RouteImplementation.prototype.route = function (path) {
        //consider using:
        //* https://raw.githubusercontent.com/cmorten/opine/main/src/utils/pathToRegex.ts
        //* https://github.com/pillarjs/path-to-regexp
        var r = path.toLowerCase();
        var m = new Map();
        this.map.set(r, m);
        if (path.endsWith('*'))
            this.starRoutes.push({ route: r.substring(0, r.length - 1), handler: m });
        var route = {
            get: function (h) {
                m.set('get', h);
                return route;
            },
            put: function (h) {
                m.set('put', h);
                return route;
            },
            post: function (h) {
                m.set('post', h);
                return route;
            },
            delete: function (h) {
                m.set('delete', h);
                return route;
            },
        };
        return route;
    };
    RouteImplementation.prototype.handle = function (req, gRes) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (res, rej) {
                        var response = new (/** @class */ (function () {
                            function class_1() {
                                this.statusCode = 200;
                            }
                            class_1.prototype.write = function (data) {
                                ;
                                gRes.write(data);
                            };
                            class_1.prototype.writeHead = function (statusCode, headers) {
                                ;
                                gRes.writeHead(statusCode, headers);
                                this.statusCode = statusCode;
                                res({ statusCode: statusCode });
                            };
                            class_1.prototype.flush = function () {
                                if (gRes.flush)
                                    gRes.flush();
                            };
                            class_1.prototype.json = function (data) {
                                if (gRes !== undefined)
                                    gRes.json(data);
                                res({ statusCode: this.statusCode, data: data });
                            };
                            class_1.prototype.send = function (html) {
                                if (gRes !== undefined)
                                    gRes.send(html);
                                res({ statusCode: this.statusCode, html: html });
                            };
                            class_1.prototype.status = function (statusCode) {
                                if (gRes !== undefined)
                                    gRes.status(statusCode);
                                this.statusCode = statusCode;
                                return this;
                            };
                            class_1.prototype.end = function () {
                                if (gRes !== undefined)
                                    gRes.end();
                                res({
                                    statusCode: this.statusCode,
                                });
                            };
                            return class_1;
                        }()))();
                        try {
                            _this.middleware(req, response, function () { return res(undefined); });
                        }
                        catch (err) {
                            rej(err);
                        }
                    })];
            });
        });
    };
    RouteImplementation.prototype.middleware = function (origReq, res, next) {
        var e_8, _a;
        var req = this.coreOptions.buildGenericRequestInfo(origReq);
        var theUrl = req.url;
        if (theUrl.startsWith('/'))
            //next sends a partial url '/api/tasks' and not the full url
            theUrl = 'http://stam' + theUrl;
        var url = new URL(theUrl);
        var path = url.pathname;
        if (!req.query) {
            var query_1 = {};
            url.searchParams.forEach(function (val, key) {
                var current = query_1[key];
                if (!current) {
                    query_1[key] = val;
                    return;
                }
                if (Array.isArray(current)) {
                    current.push(val);
                    return;
                }
                query_1[key] = [current, val];
            });
            origReq['_tempQuery'] = query_1;
            req.query = query_1;
        }
        var lowerPath = path.toLowerCase();
        var m = this.map.get(lowerPath);
        if (!m)
            try {
                for (var _b = tslib_1.__values(this.starRoutes), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var route = _c.value;
                    if (lowerPath.startsWith(route.route)) {
                        m = route.handler;
                        break;
                    }
                }
            }
            catch (e_8_1) { e_8 = { error: e_8_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_8) throw e_8.error; }
            }
        if (m) {
            var h = m.get(req.method.toLowerCase());
            if (h) {
                h(origReq, res, next);
                return;
            }
        }
        var idPosition = path.lastIndexOf('/');
        if (idPosition >= 0) {
            lowerPath = lowerPath.substring(0, idPosition) + '/:id';
            m = this.map.get(lowerPath);
            if (m) {
                var h = m.get(req.method.toLowerCase());
                if (h) {
                    if (!req.params) {
                        req.params = {};
                        origReq['_tempParams'] = req.params;
                    }
                    req.params.id = path.substring(idPosition + 1).replace(/%2C/g, ',');
                    h(origReq, res, next);
                    return;
                }
            }
        }
        next();
    };
    return RouteImplementation;
}());
exports.RouteImplementation = RouteImplementation;
var JobsInQueueEntity = /** @class */ (function (_super) {
    tslib_1.__extends(JobsInQueueEntity, _super);
    function JobsInQueueEntity() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    tslib_1.__decorate([
        Fields_js_1.Fields.string(),
        tslib_1.__metadata("design:type", String)
    ], JobsInQueueEntity.prototype, "userId", void 0);
    tslib_1.__decorate([
        Fields_js_1.Fields.string(),
        tslib_1.__metadata("design:type", String)
    ], JobsInQueueEntity.prototype, "url", void 0);
    tslib_1.__decorate([
        Fields_js_1.Fields.date(),
        tslib_1.__metadata("design:type", Date)
    ], JobsInQueueEntity.prototype, "submitTime", void 0);
    tslib_1.__decorate([
        Fields_js_1.Fields.date(),
        tslib_1.__metadata("design:type", Date)
    ], JobsInQueueEntity.prototype, "doneTime", void 0);
    tslib_1.__decorate([
        Fields_js_1.Fields.string(),
        tslib_1.__metadata("design:type", String)
    ], JobsInQueueEntity.prototype, "result", void 0);
    tslib_1.__decorate([
        Fields_js_1.Fields.boolean(),
        tslib_1.__metadata("design:type", Boolean)
    ], JobsInQueueEntity.prototype, "done", void 0);
    tslib_1.__decorate([
        Fields_js_1.Fields.boolean(),
        tslib_1.__metadata("design:type", Boolean)
    ], JobsInQueueEntity.prototype, "error", void 0);
    tslib_1.__decorate([
        Fields_js_1.Fields.number(),
        tslib_1.__metadata("design:type", Number)
    ], JobsInQueueEntity.prototype, "progress", void 0);
    JobsInQueueEntity = tslib_1.__decorate([
        (0, entity_js_1.Entity)(undefined, {
            dbName: 'jobsInQueue',
        })
    ], JobsInQueueEntity);
    return JobsInQueueEntity;
}(IdEntity_js_1.IdEntity));
exports.JobsInQueueEntity = JobsInQueueEntity;
remult_static_js_1.remultStatic.allEntities.splice(remult_static_js_1.remultStatic.allEntities.indexOf(JobsInQueueEntity), 1);
