"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildEntityInfo = void 0;
var tslib_1 = require("tslib");
var relationInfoMember_js_1 = require("../src/remult3/relationInfoMember.js");
var filter_interfaces_js_1 = require("../src/filter/filter-interfaces.js");
var get_remult_admin_html_js_1 = require("./get-remult-admin-html.js");
var RepositoryImplementation_js_1 = require("../src/remult3/RepositoryImplementation.js");
function remultAdminHtml(options) {
    var optionsFromServer = tslib_1.__assign({}, options);
    //@ts-ignore
    delete optionsFromServer.entities;
    delete optionsFromServer.remult;
    return (0, get_remult_admin_html_js_1.getHtml)().replace('<!--PLACE_HERE-->', "<script >const entities = ".concat(JSON.stringify(buildEntityInfo(options)), "\n    const optionsFromServer = ").concat(JSON.stringify(optionsFromServer), "\n    </script>"));
}
exports.default = remultAdminHtml;
function buildEntityInfo(options) {
    var e_1, _a, e_2, _b, e_3, _c;
    var _d;
    var entities = [];
    try {
        for (var _e = tslib_1.__values(options.entities.map(function (e) { return options.remult.repo(e).metadata; })), _f = _e.next(); !_f.done; _f = _e.next()) {
            var metadata = _f.value;
            var fields = [];
            var relations = [];
            var ids = {};
            try {
                for (var _g = (e_2 = void 0, tslib_1.__values(metadata.idMetadata.fields)), _h = _g.next(); !_h.done; _h = _g.next()) {
                    var f = _h.value;
                    ids[f.key] = true;
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_h && !_h.done && (_b = _g.return)) _b.call(_g);
                }
                finally { if (e_2) throw e_2.error; }
            }
            var _loop_1 = function (x) {
                if (!x.includedInApi(undefined))
                    return "continue";
                var relation = void 0;
                var valFieldKey = x.key;
                var info = (0, relationInfoMember_js_1.getRelationFieldInfo)(x);
                if (info) {
                    var relInfo = info.getFields();
                    var relRepo = options.remult.repo(info.toEntity);
                    var where = typeof info.options.findOptions === 'object' &&
                        info.options.findOptions.where
                        ? filter_interfaces_js_1.Filter.entityFilterToJson(relRepo.metadata, info.options.findOptions.where)
                        : undefined;
                    var idField_1 = relRepo.metadata.idMetadata.field.key;
                    if (info.type === 'reference' || info.type === 'toOne') {
                        if (info.type == 'toOne') {
                            for (var key in relInfo.fields) {
                                if (Object.prototype.hasOwnProperty.call(relInfo.fields, key)) {
                                    var element = relInfo.fields[key];
                                    valFieldKey = element;
                                }
                            }
                        }
                        relation = tslib_1.__assign(tslib_1.__assign({}, relInfo), { where: where, entityKey: relRepo.metadata.key, idField: idField_1, captionField: (_d = relRepo.metadata.fields
                                .toArray()
                                .find(function (x) { return x.key != idField_1 && x.valueType == String; })) === null || _d === void 0 ? void 0 : _d.key });
                    }
                    else if (info.type === 'toMany') {
                        relations.push(tslib_1.__assign(tslib_1.__assign({}, relInfo), { where: where, entityKey: relRepo.metadata.key }));
                        return "continue";
                    }
                }
                fields.push({
                    key: x.key,
                    readOnly: x.dbReadOnly || !x.apiUpdateAllowed() || x.isServerExpression,
                    values: (0, RepositoryImplementation_js_1.getValueList)(x),
                    valFieldKey: valFieldKey,
                    caption: x.caption,
                    relationToOne: relation,
                    type: x.valueConverter.fieldTypeInDb == 'json'
                        ? 'json'
                        : x.valueType === Number
                            ? 'number'
                            : x.valueType === Boolean
                                ? 'boolean'
                                : x.valueType === Date
                                    ? 'date'
                                    : 'string',
                });
            };
            try {
                for (var _j = (e_3 = void 0, tslib_1.__values(metadata.fields.toArray())), _k = _j.next(); !_k.done; _k = _j.next()) {
                    var x = _k.value;
                    _loop_1(x);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_k && !_k.done && (_c = _j.return)) _c.call(_j);
                }
                finally { if (e_3) throw e_3.error; }
            }
            entities.push({
                key: metadata.key,
                caption: metadata.caption,
                ids: ids,
                fields: fields,
                relations: relations,
            });
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return entities;
}
exports.buildEntityInfo = buildEntityInfo;
